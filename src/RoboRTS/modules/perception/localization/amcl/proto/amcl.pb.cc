// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: amcl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "amcl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AmclParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AmclParam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LaserModel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OdomModel_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_amcl_2eproto() {
  protobuf_AddDesc_amcl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "amcl.proto");
  GOOGLE_CHECK(file != NULL);
  AmclParam_descriptor_ = file->message_type(0);
  static const int AmclParam_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, use_map_topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, first_map_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, gui_publish_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, laser_min_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, laser_max_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, laser_max_beams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, min_particles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, max_particles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, kld_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, kld_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, laser_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, z_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, z_rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, sigma_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, lambda_short_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, laser_likelihood_max_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, do_beamskip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, beam_skip_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, beam_skip_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, beam_skip_error_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, odom_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, odom_alpha1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, odom_alpha2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, odom_alpha3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, odom_alpha4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, odom_alpha5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, update_min_d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, update_min_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, resample_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, transform_tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, recovery_alpha_slow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, recovery_alpha_fast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, use_global_localization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, laser_filter_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, max_uwb_particles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, uwb_cov_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, uwb_cov_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, resample_uwb_factor_),
  };
  AmclParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AmclParam_descriptor_,
      AmclParam::default_instance_,
      AmclParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmclParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AmclParam));
  LaserModel_descriptor_ = file->enum_type(0);
  OdomModel_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_amcl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AmclParam_descriptor_, &AmclParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_amcl_2eproto() {
  delete AmclParam::default_instance_;
  delete AmclParam_reflection_;
}

void protobuf_AddDesc_amcl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\namcl.proto\"\243\t\n\tAmclParam\022\034\n\ruse_map_to"
    "pic\030\001 \002(\010:\005false\022\035\n\016first_map_only\030\002 \002(\010"
    ":\005false\022\034\n\020gui_publish_rate\030\003 \002(\005:\00210\022\035\n"
    "\017laser_min_range\030\004 \001(\001:\0040.15\022\032\n\017laser_ma"
    "x_range\030\005 \001(\001:\0018\022\033\n\017laser_max_beams\030\006 \001("
    "\005:\00230\022\032\n\rmin_particles\030\007 \002(\005:\003500\022\033\n\rmax"
    "_particles\030\010 \002(\005:\0045000\022\025\n\007kld_err\030\t \002(\001:"
    "\0040.05\022\023\n\005kld_z\030\n \002(\001:\0040.99\022C\n\013laser_mode"
    "l\030\013 \002(\0162\013.LaserModel:!LASER_MODEL_LIKELI"
    "HOOD_FIELD_PROB\022\022\n\005z_hit\030\014 \002(\001:\0030.5\022\023\n\006z"
    "_rand\030\r \002(\001:\0030.5\022\026\n\tsigma_hit\030\016 \002(\001:\0030.2"
    "\022\031\n\014lambda_short\030\017 \002(\001:\0030.1\022$\n\031laser_lik"
    "elihood_max_dist\030\020 \002(\001:\0012\022\031\n\013do_beamskip"
    "\030\021 \002(\010:\004true\022\037\n\022beam_skip_distance\030\022 \002(\001"
    ":\0030.5\022 \n\023beam_skip_threshold\030\023 \002(\001:\0030.3\022"
    "&\n\031beam_skip_error_threshold\030\024 \002(\001:\0030.9\022"
    "/\n\nodom_model\030\025 \002(\0162\n.OdomModel:\017ODOM_MO"
    "DEL_OMNI\022\032\n\013odom_alpha1\030\026 \002(\001:\0050.005\022\032\n\013"
    "odom_alpha2\030\027 \002(\001:\0050.005\022\031\n\013odom_alpha3\030"
    "\030 \002(\001:\0040.01\022\032\n\013odom_alpha4\030\031 \002(\001:\0050.005\022"
    "\032\n\013odom_alpha5\030\032 \002(\001:\0050.003\022\031\n\014update_mi"
    "n_d\030\033 \002(\001:\0030.2\022\031\n\014update_min_a\030\034 \002(\001:\0030."
    "5\022\034\n\021resample_interval\030  \002(\005:\0011\022 \n\023trans"
    "form_tolerance\030! \002(\001:\0030.1\022\"\n\023recovery_al"
    "pha_slow\030\" \002(\001:\0050.001\022 \n\023recovery_alpha_"
    "fast\030# \002(\001:\0030.1\022%\n\027use_global_localizati"
    "on\030* \002(\010:\004true\022!\n\023laser_filter_weight\030+ "
    "\002(\001:\0040.05\022\035\n\021max_uwb_particles\0303 \001(\005:\00210"
    "\022\027\n\tuwb_cov_x\0304 \001(\001:\0040.09\022\027\n\tuwb_cov_y\0305"
    " \001(\001:\0040.09\022\036\n\023resample_uwb_factor\0306 \001(\001:"
    "\0013*k\n\nLaserModel\022\024\n\020LASER_MODEL_BEAM\020\000\022 "
    "\n\034LASER_MODEL_LIKELIHOOD_FIELD\020\001\022%\n!LASE"
    "R_MODEL_LIKELIHOOD_FIELD_PROB\020\002*5\n\tOdomM"
    "odel\022\023\n\017ODOM_MODEL_DIFF\020\000\022\023\n\017ODOM_MODEL_"
    "OMNI\020\001", 1366);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "amcl.proto", &protobuf_RegisterTypes);
  AmclParam::default_instance_ = new AmclParam();
  AmclParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_amcl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_amcl_2eproto {
  StaticDescriptorInitializer_amcl_2eproto() {
    protobuf_AddDesc_amcl_2eproto();
  }
} static_descriptor_initializer_amcl_2eproto_;
const ::google::protobuf::EnumDescriptor* LaserModel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaserModel_descriptor_;
}
bool LaserModel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OdomModel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OdomModel_descriptor_;
}
bool OdomModel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AmclParam::kUseMapTopicFieldNumber;
const int AmclParam::kFirstMapOnlyFieldNumber;
const int AmclParam::kGuiPublishRateFieldNumber;
const int AmclParam::kLaserMinRangeFieldNumber;
const int AmclParam::kLaserMaxRangeFieldNumber;
const int AmclParam::kLaserMaxBeamsFieldNumber;
const int AmclParam::kMinParticlesFieldNumber;
const int AmclParam::kMaxParticlesFieldNumber;
const int AmclParam::kKldErrFieldNumber;
const int AmclParam::kKldZFieldNumber;
const int AmclParam::kLaserModelFieldNumber;
const int AmclParam::kZHitFieldNumber;
const int AmclParam::kZRandFieldNumber;
const int AmclParam::kSigmaHitFieldNumber;
const int AmclParam::kLambdaShortFieldNumber;
const int AmclParam::kLaserLikelihoodMaxDistFieldNumber;
const int AmclParam::kDoBeamskipFieldNumber;
const int AmclParam::kBeamSkipDistanceFieldNumber;
const int AmclParam::kBeamSkipThresholdFieldNumber;
const int AmclParam::kBeamSkipErrorThresholdFieldNumber;
const int AmclParam::kOdomModelFieldNumber;
const int AmclParam::kOdomAlpha1FieldNumber;
const int AmclParam::kOdomAlpha2FieldNumber;
const int AmclParam::kOdomAlpha3FieldNumber;
const int AmclParam::kOdomAlpha4FieldNumber;
const int AmclParam::kOdomAlpha5FieldNumber;
const int AmclParam::kUpdateMinDFieldNumber;
const int AmclParam::kUpdateMinAFieldNumber;
const int AmclParam::kResampleIntervalFieldNumber;
const int AmclParam::kTransformToleranceFieldNumber;
const int AmclParam::kRecoveryAlphaSlowFieldNumber;
const int AmclParam::kRecoveryAlphaFastFieldNumber;
const int AmclParam::kUseGlobalLocalizationFieldNumber;
const int AmclParam::kLaserFilterWeightFieldNumber;
const int AmclParam::kMaxUwbParticlesFieldNumber;
const int AmclParam::kUwbCovXFieldNumber;
const int AmclParam::kUwbCovYFieldNumber;
const int AmclParam::kResampleUwbFactorFieldNumber;
#endif  // !_MSC_VER

AmclParam::AmclParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AmclParam)
}

void AmclParam::InitAsDefaultInstance() {
}

AmclParam::AmclParam(const AmclParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AmclParam)
}

void AmclParam::SharedCtor() {
  _cached_size_ = 0;
  use_map_topic_ = false;
  first_map_only_ = false;
  gui_publish_rate_ = 10;
  laser_min_range_ = 0.15;
  laser_max_range_ = 8;
  laser_max_beams_ = 30;
  min_particles_ = 500;
  max_particles_ = 5000;
  kld_err_ = 0.05;
  kld_z_ = 0.99;
  laser_model_ = 2;
  z_hit_ = 0.5;
  z_rand_ = 0.5;
  sigma_hit_ = 0.2;
  lambda_short_ = 0.1;
  laser_likelihood_max_dist_ = 2;
  do_beamskip_ = true;
  beam_skip_distance_ = 0.5;
  beam_skip_threshold_ = 0.3;
  beam_skip_error_threshold_ = 0.9;
  odom_model_ = 1;
  odom_alpha1_ = 0.005;
  odom_alpha2_ = 0.005;
  odom_alpha3_ = 0.01;
  odom_alpha4_ = 0.005;
  odom_alpha5_ = 0.003;
  update_min_d_ = 0.2;
  update_min_a_ = 0.5;
  resample_interval_ = 1;
  transform_tolerance_ = 0.1;
  recovery_alpha_slow_ = 0.001;
  recovery_alpha_fast_ = 0.1;
  use_global_localization_ = true;
  laser_filter_weight_ = 0.05;
  max_uwb_particles_ = 10;
  uwb_cov_x_ = 0.09;
  uwb_cov_y_ = 0.09;
  resample_uwb_factor_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AmclParam::~AmclParam() {
  // @@protoc_insertion_point(destructor:AmclParam)
  SharedDtor();
}

void AmclParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AmclParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AmclParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AmclParam_descriptor_;
}

const AmclParam& AmclParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_amcl_2eproto();
  return *default_instance_;
}

AmclParam* AmclParam::default_instance_ = NULL;

AmclParam* AmclParam::New() const {
  return new AmclParam;
}

void AmclParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AmclParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(use_map_topic_, first_map_only_);
    gui_publish_rate_ = 10;
    laser_min_range_ = 0.15;
    laser_max_range_ = 8;
    laser_max_beams_ = 30;
    min_particles_ = 500;
    max_particles_ = 5000;
  }
  if (_has_bits_[8 / 32] & 65280) {
    kld_err_ = 0.05;
    kld_z_ = 0.99;
    laser_model_ = 2;
    z_hit_ = 0.5;
    z_rand_ = 0.5;
    sigma_hit_ = 0.2;
    lambda_short_ = 0.1;
    laser_likelihood_max_dist_ = 2;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    do_beamskip_ = true;
    beam_skip_distance_ = 0.5;
    beam_skip_threshold_ = 0.3;
    beam_skip_error_threshold_ = 0.9;
    odom_model_ = 1;
    odom_alpha1_ = 0.005;
    odom_alpha2_ = 0.005;
    odom_alpha3_ = 0.01;
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    odom_alpha4_ = 0.005;
    odom_alpha5_ = 0.003;
    update_min_d_ = 0.2;
    update_min_a_ = 0.5;
    resample_interval_ = 1;
    transform_tolerance_ = 0.1;
    recovery_alpha_slow_ = 0.001;
    recovery_alpha_fast_ = 0.1;
  }
  if (_has_bits_[32 / 32] & 63) {
    use_global_localization_ = true;
    laser_filter_weight_ = 0.05;
    max_uwb_particles_ = 10;
    uwb_cov_x_ = 0.09;
    uwb_cov_y_ = 0.09;
    resample_uwb_factor_ = 3;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AmclParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AmclParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool use_map_topic = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_map_topic_)));
          set_has_use_map_topic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_first_map_only;
        break;
      }

      // required bool first_map_only = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_first_map_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_map_only_)));
          set_has_first_map_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gui_publish_rate;
        break;
      }

      // required int32 gui_publish_rate = 3 [default = 10];
      case 3: {
        if (tag == 24) {
         parse_gui_publish_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gui_publish_rate_)));
          set_has_gui_publish_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_laser_min_range;
        break;
      }

      // optional double laser_min_range = 4 [default = 0.15];
      case 4: {
        if (tag == 33) {
         parse_laser_min_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_min_range_)));
          set_has_laser_min_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_laser_max_range;
        break;
      }

      // optional double laser_max_range = 5 [default = 8];
      case 5: {
        if (tag == 41) {
         parse_laser_max_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_max_range_)));
          set_has_laser_max_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_laser_max_beams;
        break;
      }

      // optional int32 laser_max_beams = 6 [default = 30];
      case 6: {
        if (tag == 48) {
         parse_laser_max_beams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laser_max_beams_)));
          set_has_laser_max_beams();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_min_particles;
        break;
      }

      // required int32 min_particles = 7 [default = 500];
      case 7: {
        if (tag == 56) {
         parse_min_particles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_particles_)));
          set_has_min_particles();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_particles;
        break;
      }

      // required int32 max_particles = 8 [default = 5000];
      case 8: {
        if (tag == 64) {
         parse_max_particles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_particles_)));
          set_has_max_particles();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_kld_err;
        break;
      }

      // required double kld_err = 9 [default = 0.05];
      case 9: {
        if (tag == 73) {
         parse_kld_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kld_err_)));
          set_has_kld_err();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_kld_z;
        break;
      }

      // required double kld_z = 10 [default = 0.99];
      case 10: {
        if (tag == 81) {
         parse_kld_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kld_z_)));
          set_has_kld_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_laser_model;
        break;
      }

      // required .LaserModel laser_model = 11 [default = LASER_MODEL_LIKELIHOOD_FIELD_PROB];
      case 11: {
        if (tag == 88) {
         parse_laser_model:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LaserModel_IsValid(value)) {
            set_laser_model(static_cast< ::LaserModel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_z_hit;
        break;
      }

      // required double z_hit = 12 [default = 0.5];
      case 12: {
        if (tag == 97) {
         parse_z_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_hit_)));
          set_has_z_hit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_z_rand;
        break;
      }

      // required double z_rand = 13 [default = 0.5];
      case 13: {
        if (tag == 105) {
         parse_z_rand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_rand_)));
          set_has_z_rand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_sigma_hit;
        break;
      }

      // required double sigma_hit = 14 [default = 0.2];
      case 14: {
        if (tag == 113) {
         parse_sigma_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigma_hit_)));
          set_has_sigma_hit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_lambda_short;
        break;
      }

      // required double lambda_short = 15 [default = 0.1];
      case 15: {
        if (tag == 121) {
         parse_lambda_short:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lambda_short_)));
          set_has_lambda_short();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_laser_likelihood_max_dist;
        break;
      }

      // required double laser_likelihood_max_dist = 16 [default = 2];
      case 16: {
        if (tag == 129) {
         parse_laser_likelihood_max_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_likelihood_max_dist_)));
          set_has_laser_likelihood_max_dist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_do_beamskip;
        break;
      }

      // required bool do_beamskip = 17 [default = true];
      case 17: {
        if (tag == 136) {
         parse_do_beamskip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_beamskip_)));
          set_has_do_beamskip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_beam_skip_distance;
        break;
      }

      // required double beam_skip_distance = 18 [default = 0.5];
      case 18: {
        if (tag == 145) {
         parse_beam_skip_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beam_skip_distance_)));
          set_has_beam_skip_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_beam_skip_threshold;
        break;
      }

      // required double beam_skip_threshold = 19 [default = 0.3];
      case 19: {
        if (tag == 153) {
         parse_beam_skip_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beam_skip_threshold_)));
          set_has_beam_skip_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_beam_skip_error_threshold;
        break;
      }

      // required double beam_skip_error_threshold = 20 [default = 0.9];
      case 20: {
        if (tag == 161) {
         parse_beam_skip_error_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beam_skip_error_threshold_)));
          set_has_beam_skip_error_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_odom_model;
        break;
      }

      // required .OdomModel odom_model = 21 [default = ODOM_MODEL_OMNI];
      case 21: {
        if (tag == 168) {
         parse_odom_model:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OdomModel_IsValid(value)) {
            set_odom_model(static_cast< ::OdomModel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_odom_alpha1;
        break;
      }

      // required double odom_alpha1 = 22 [default = 0.005];
      case 22: {
        if (tag == 177) {
         parse_odom_alpha1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odom_alpha1_)));
          set_has_odom_alpha1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_odom_alpha2;
        break;
      }

      // required double odom_alpha2 = 23 [default = 0.005];
      case 23: {
        if (tag == 185) {
         parse_odom_alpha2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odom_alpha2_)));
          set_has_odom_alpha2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_odom_alpha3;
        break;
      }

      // required double odom_alpha3 = 24 [default = 0.01];
      case 24: {
        if (tag == 193) {
         parse_odom_alpha3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odom_alpha3_)));
          set_has_odom_alpha3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_odom_alpha4;
        break;
      }

      // required double odom_alpha4 = 25 [default = 0.005];
      case 25: {
        if (tag == 201) {
         parse_odom_alpha4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odom_alpha4_)));
          set_has_odom_alpha4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_odom_alpha5;
        break;
      }

      // required double odom_alpha5 = 26 [default = 0.003];
      case 26: {
        if (tag == 209) {
         parse_odom_alpha5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odom_alpha5_)));
          set_has_odom_alpha5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_update_min_d;
        break;
      }

      // required double update_min_d = 27 [default = 0.2];
      case 27: {
        if (tag == 217) {
         parse_update_min_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &update_min_d_)));
          set_has_update_min_d();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_update_min_a;
        break;
      }

      // required double update_min_a = 28 [default = 0.5];
      case 28: {
        if (tag == 225) {
         parse_update_min_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &update_min_a_)));
          set_has_update_min_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_resample_interval;
        break;
      }

      // required int32 resample_interval = 32 [default = 1];
      case 32: {
        if (tag == 256) {
         parse_resample_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resample_interval_)));
          set_has_resample_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(265)) goto parse_transform_tolerance;
        break;
      }

      // required double transform_tolerance = 33 [default = 0.1];
      case 33: {
        if (tag == 265) {
         parse_transform_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_tolerance_)));
          set_has_transform_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(273)) goto parse_recovery_alpha_slow;
        break;
      }

      // required double recovery_alpha_slow = 34 [default = 0.001];
      case 34: {
        if (tag == 273) {
         parse_recovery_alpha_slow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &recovery_alpha_slow_)));
          set_has_recovery_alpha_slow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(281)) goto parse_recovery_alpha_fast;
        break;
      }

      // required double recovery_alpha_fast = 35 [default = 0.1];
      case 35: {
        if (tag == 281) {
         parse_recovery_alpha_fast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &recovery_alpha_fast_)));
          set_has_recovery_alpha_fast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_use_global_localization;
        break;
      }

      // required bool use_global_localization = 42 [default = true];
      case 42: {
        if (tag == 336) {
         parse_use_global_localization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_global_localization_)));
          set_has_use_global_localization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(345)) goto parse_laser_filter_weight;
        break;
      }

      // required double laser_filter_weight = 43 [default = 0.05];
      case 43: {
        if (tag == 345) {
         parse_laser_filter_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_filter_weight_)));
          set_has_laser_filter_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_max_uwb_particles;
        break;
      }

      // optional int32 max_uwb_particles = 51 [default = 10];
      case 51: {
        if (tag == 408) {
         parse_max_uwb_particles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_uwb_particles_)));
          set_has_max_uwb_particles();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(417)) goto parse_uwb_cov_x;
        break;
      }

      // optional double uwb_cov_x = 52 [default = 0.09];
      case 52: {
        if (tag == 417) {
         parse_uwb_cov_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uwb_cov_x_)));
          set_has_uwb_cov_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(425)) goto parse_uwb_cov_y;
        break;
      }

      // optional double uwb_cov_y = 53 [default = 0.09];
      case 53: {
        if (tag == 425) {
         parse_uwb_cov_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uwb_cov_y_)));
          set_has_uwb_cov_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(433)) goto parse_resample_uwb_factor;
        break;
      }

      // optional double resample_uwb_factor = 54 [default = 3];
      case 54: {
        if (tag == 433) {
         parse_resample_uwb_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resample_uwb_factor_)));
          set_has_resample_uwb_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AmclParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AmclParam)
  return false;
#undef DO_
}

void AmclParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AmclParam)
  // required bool use_map_topic = 1 [default = false];
  if (has_use_map_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_map_topic(), output);
  }

  // required bool first_map_only = 2 [default = false];
  if (has_first_map_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->first_map_only(), output);
  }

  // required int32 gui_publish_rate = 3 [default = 10];
  if (has_gui_publish_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gui_publish_rate(), output);
  }

  // optional double laser_min_range = 4 [default = 0.15];
  if (has_laser_min_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->laser_min_range(), output);
  }

  // optional double laser_max_range = 5 [default = 8];
  if (has_laser_max_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->laser_max_range(), output);
  }

  // optional int32 laser_max_beams = 6 [default = 30];
  if (has_laser_max_beams()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->laser_max_beams(), output);
  }

  // required int32 min_particles = 7 [default = 500];
  if (has_min_particles()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->min_particles(), output);
  }

  // required int32 max_particles = 8 [default = 5000];
  if (has_max_particles()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_particles(), output);
  }

  // required double kld_err = 9 [default = 0.05];
  if (has_kld_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->kld_err(), output);
  }

  // required double kld_z = 10 [default = 0.99];
  if (has_kld_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->kld_z(), output);
  }

  // required .LaserModel laser_model = 11 [default = LASER_MODEL_LIKELIHOOD_FIELD_PROB];
  if (has_laser_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->laser_model(), output);
  }

  // required double z_hit = 12 [default = 0.5];
  if (has_z_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->z_hit(), output);
  }

  // required double z_rand = 13 [default = 0.5];
  if (has_z_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->z_rand(), output);
  }

  // required double sigma_hit = 14 [default = 0.2];
  if (has_sigma_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->sigma_hit(), output);
  }

  // required double lambda_short = 15 [default = 0.1];
  if (has_lambda_short()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->lambda_short(), output);
  }

  // required double laser_likelihood_max_dist = 16 [default = 2];
  if (has_laser_likelihood_max_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->laser_likelihood_max_dist(), output);
  }

  // required bool do_beamskip = 17 [default = true];
  if (has_do_beamskip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->do_beamskip(), output);
  }

  // required double beam_skip_distance = 18 [default = 0.5];
  if (has_beam_skip_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->beam_skip_distance(), output);
  }

  // required double beam_skip_threshold = 19 [default = 0.3];
  if (has_beam_skip_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->beam_skip_threshold(), output);
  }

  // required double beam_skip_error_threshold = 20 [default = 0.9];
  if (has_beam_skip_error_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->beam_skip_error_threshold(), output);
  }

  // required .OdomModel odom_model = 21 [default = ODOM_MODEL_OMNI];
  if (has_odom_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->odom_model(), output);
  }

  // required double odom_alpha1 = 22 [default = 0.005];
  if (has_odom_alpha1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->odom_alpha1(), output);
  }

  // required double odom_alpha2 = 23 [default = 0.005];
  if (has_odom_alpha2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->odom_alpha2(), output);
  }

  // required double odom_alpha3 = 24 [default = 0.01];
  if (has_odom_alpha3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->odom_alpha3(), output);
  }

  // required double odom_alpha4 = 25 [default = 0.005];
  if (has_odom_alpha4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->odom_alpha4(), output);
  }

  // required double odom_alpha5 = 26 [default = 0.003];
  if (has_odom_alpha5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->odom_alpha5(), output);
  }

  // required double update_min_d = 27 [default = 0.2];
  if (has_update_min_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->update_min_d(), output);
  }

  // required double update_min_a = 28 [default = 0.5];
  if (has_update_min_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->update_min_a(), output);
  }

  // required int32 resample_interval = 32 [default = 1];
  if (has_resample_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->resample_interval(), output);
  }

  // required double transform_tolerance = 33 [default = 0.1];
  if (has_transform_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->transform_tolerance(), output);
  }

  // required double recovery_alpha_slow = 34 [default = 0.001];
  if (has_recovery_alpha_slow()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->recovery_alpha_slow(), output);
  }

  // required double recovery_alpha_fast = 35 [default = 0.1];
  if (has_recovery_alpha_fast()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->recovery_alpha_fast(), output);
  }

  // required bool use_global_localization = 42 [default = true];
  if (has_use_global_localization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->use_global_localization(), output);
  }

  // required double laser_filter_weight = 43 [default = 0.05];
  if (has_laser_filter_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->laser_filter_weight(), output);
  }

  // optional int32 max_uwb_particles = 51 [default = 10];
  if (has_max_uwb_particles()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->max_uwb_particles(), output);
  }

  // optional double uwb_cov_x = 52 [default = 0.09];
  if (has_uwb_cov_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(52, this->uwb_cov_x(), output);
  }

  // optional double uwb_cov_y = 53 [default = 0.09];
  if (has_uwb_cov_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(53, this->uwb_cov_y(), output);
  }

  // optional double resample_uwb_factor = 54 [default = 3];
  if (has_resample_uwb_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(54, this->resample_uwb_factor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AmclParam)
}

::google::protobuf::uint8* AmclParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AmclParam)
  // required bool use_map_topic = 1 [default = false];
  if (has_use_map_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_map_topic(), target);
  }

  // required bool first_map_only = 2 [default = false];
  if (has_first_map_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->first_map_only(), target);
  }

  // required int32 gui_publish_rate = 3 [default = 10];
  if (has_gui_publish_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gui_publish_rate(), target);
  }

  // optional double laser_min_range = 4 [default = 0.15];
  if (has_laser_min_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->laser_min_range(), target);
  }

  // optional double laser_max_range = 5 [default = 8];
  if (has_laser_max_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->laser_max_range(), target);
  }

  // optional int32 laser_max_beams = 6 [default = 30];
  if (has_laser_max_beams()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->laser_max_beams(), target);
  }

  // required int32 min_particles = 7 [default = 500];
  if (has_min_particles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->min_particles(), target);
  }

  // required int32 max_particles = 8 [default = 5000];
  if (has_max_particles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_particles(), target);
  }

  // required double kld_err = 9 [default = 0.05];
  if (has_kld_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->kld_err(), target);
  }

  // required double kld_z = 10 [default = 0.99];
  if (has_kld_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->kld_z(), target);
  }

  // required .LaserModel laser_model = 11 [default = LASER_MODEL_LIKELIHOOD_FIELD_PROB];
  if (has_laser_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->laser_model(), target);
  }

  // required double z_hit = 12 [default = 0.5];
  if (has_z_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->z_hit(), target);
  }

  // required double z_rand = 13 [default = 0.5];
  if (has_z_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->z_rand(), target);
  }

  // required double sigma_hit = 14 [default = 0.2];
  if (has_sigma_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->sigma_hit(), target);
  }

  // required double lambda_short = 15 [default = 0.1];
  if (has_lambda_short()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->lambda_short(), target);
  }

  // required double laser_likelihood_max_dist = 16 [default = 2];
  if (has_laser_likelihood_max_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->laser_likelihood_max_dist(), target);
  }

  // required bool do_beamskip = 17 [default = true];
  if (has_do_beamskip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->do_beamskip(), target);
  }

  // required double beam_skip_distance = 18 [default = 0.5];
  if (has_beam_skip_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->beam_skip_distance(), target);
  }

  // required double beam_skip_threshold = 19 [default = 0.3];
  if (has_beam_skip_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->beam_skip_threshold(), target);
  }

  // required double beam_skip_error_threshold = 20 [default = 0.9];
  if (has_beam_skip_error_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->beam_skip_error_threshold(), target);
  }

  // required .OdomModel odom_model = 21 [default = ODOM_MODEL_OMNI];
  if (has_odom_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->odom_model(), target);
  }

  // required double odom_alpha1 = 22 [default = 0.005];
  if (has_odom_alpha1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->odom_alpha1(), target);
  }

  // required double odom_alpha2 = 23 [default = 0.005];
  if (has_odom_alpha2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->odom_alpha2(), target);
  }

  // required double odom_alpha3 = 24 [default = 0.01];
  if (has_odom_alpha3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->odom_alpha3(), target);
  }

  // required double odom_alpha4 = 25 [default = 0.005];
  if (has_odom_alpha4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->odom_alpha4(), target);
  }

  // required double odom_alpha5 = 26 [default = 0.003];
  if (has_odom_alpha5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->odom_alpha5(), target);
  }

  // required double update_min_d = 27 [default = 0.2];
  if (has_update_min_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->update_min_d(), target);
  }

  // required double update_min_a = 28 [default = 0.5];
  if (has_update_min_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->update_min_a(), target);
  }

  // required int32 resample_interval = 32 [default = 1];
  if (has_resample_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->resample_interval(), target);
  }

  // required double transform_tolerance = 33 [default = 0.1];
  if (has_transform_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->transform_tolerance(), target);
  }

  // required double recovery_alpha_slow = 34 [default = 0.001];
  if (has_recovery_alpha_slow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->recovery_alpha_slow(), target);
  }

  // required double recovery_alpha_fast = 35 [default = 0.1];
  if (has_recovery_alpha_fast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->recovery_alpha_fast(), target);
  }

  // required bool use_global_localization = 42 [default = true];
  if (has_use_global_localization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->use_global_localization(), target);
  }

  // required double laser_filter_weight = 43 [default = 0.05];
  if (has_laser_filter_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->laser_filter_weight(), target);
  }

  // optional int32 max_uwb_particles = 51 [default = 10];
  if (has_max_uwb_particles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->max_uwb_particles(), target);
  }

  // optional double uwb_cov_x = 52 [default = 0.09];
  if (has_uwb_cov_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(52, this->uwb_cov_x(), target);
  }

  // optional double uwb_cov_y = 53 [default = 0.09];
  if (has_uwb_cov_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(53, this->uwb_cov_y(), target);
  }

  // optional double resample_uwb_factor = 54 [default = 3];
  if (has_resample_uwb_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(54, this->resample_uwb_factor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AmclParam)
  return target;
}

int AmclParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool use_map_topic = 1 [default = false];
    if (has_use_map_topic()) {
      total_size += 1 + 1;
    }

    // required bool first_map_only = 2 [default = false];
    if (has_first_map_only()) {
      total_size += 1 + 1;
    }

    // required int32 gui_publish_rate = 3 [default = 10];
    if (has_gui_publish_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gui_publish_rate());
    }

    // optional double laser_min_range = 4 [default = 0.15];
    if (has_laser_min_range()) {
      total_size += 1 + 8;
    }

    // optional double laser_max_range = 5 [default = 8];
    if (has_laser_max_range()) {
      total_size += 1 + 8;
    }

    // optional int32 laser_max_beams = 6 [default = 30];
    if (has_laser_max_beams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laser_max_beams());
    }

    // required int32 min_particles = 7 [default = 500];
    if (has_min_particles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_particles());
    }

    // required int32 max_particles = 8 [default = 5000];
    if (has_max_particles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_particles());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double kld_err = 9 [default = 0.05];
    if (has_kld_err()) {
      total_size += 1 + 8;
    }

    // required double kld_z = 10 [default = 0.99];
    if (has_kld_z()) {
      total_size += 1 + 8;
    }

    // required .LaserModel laser_model = 11 [default = LASER_MODEL_LIKELIHOOD_FIELD_PROB];
    if (has_laser_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->laser_model());
    }

    // required double z_hit = 12 [default = 0.5];
    if (has_z_hit()) {
      total_size += 1 + 8;
    }

    // required double z_rand = 13 [default = 0.5];
    if (has_z_rand()) {
      total_size += 1 + 8;
    }

    // required double sigma_hit = 14 [default = 0.2];
    if (has_sigma_hit()) {
      total_size += 1 + 8;
    }

    // required double lambda_short = 15 [default = 0.1];
    if (has_lambda_short()) {
      total_size += 1 + 8;
    }

    // required double laser_likelihood_max_dist = 16 [default = 2];
    if (has_laser_likelihood_max_dist()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bool do_beamskip = 17 [default = true];
    if (has_do_beamskip()) {
      total_size += 2 + 1;
    }

    // required double beam_skip_distance = 18 [default = 0.5];
    if (has_beam_skip_distance()) {
      total_size += 2 + 8;
    }

    // required double beam_skip_threshold = 19 [default = 0.3];
    if (has_beam_skip_threshold()) {
      total_size += 2 + 8;
    }

    // required double beam_skip_error_threshold = 20 [default = 0.9];
    if (has_beam_skip_error_threshold()) {
      total_size += 2 + 8;
    }

    // required .OdomModel odom_model = 21 [default = ODOM_MODEL_OMNI];
    if (has_odom_model()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->odom_model());
    }

    // required double odom_alpha1 = 22 [default = 0.005];
    if (has_odom_alpha1()) {
      total_size += 2 + 8;
    }

    // required double odom_alpha2 = 23 [default = 0.005];
    if (has_odom_alpha2()) {
      total_size += 2 + 8;
    }

    // required double odom_alpha3 = 24 [default = 0.01];
    if (has_odom_alpha3()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double odom_alpha4 = 25 [default = 0.005];
    if (has_odom_alpha4()) {
      total_size += 2 + 8;
    }

    // required double odom_alpha5 = 26 [default = 0.003];
    if (has_odom_alpha5()) {
      total_size += 2 + 8;
    }

    // required double update_min_d = 27 [default = 0.2];
    if (has_update_min_d()) {
      total_size += 2 + 8;
    }

    // required double update_min_a = 28 [default = 0.5];
    if (has_update_min_a()) {
      total_size += 2 + 8;
    }

    // required int32 resample_interval = 32 [default = 1];
    if (has_resample_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resample_interval());
    }

    // required double transform_tolerance = 33 [default = 0.1];
    if (has_transform_tolerance()) {
      total_size += 2 + 8;
    }

    // required double recovery_alpha_slow = 34 [default = 0.001];
    if (has_recovery_alpha_slow()) {
      total_size += 2 + 8;
    }

    // required double recovery_alpha_fast = 35 [default = 0.1];
    if (has_recovery_alpha_fast()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required bool use_global_localization = 42 [default = true];
    if (has_use_global_localization()) {
      total_size += 2 + 1;
    }

    // required double laser_filter_weight = 43 [default = 0.05];
    if (has_laser_filter_weight()) {
      total_size += 2 + 8;
    }

    // optional int32 max_uwb_particles = 51 [default = 10];
    if (has_max_uwb_particles()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_uwb_particles());
    }

    // optional double uwb_cov_x = 52 [default = 0.09];
    if (has_uwb_cov_x()) {
      total_size += 2 + 8;
    }

    // optional double uwb_cov_y = 53 [default = 0.09];
    if (has_uwb_cov_y()) {
      total_size += 2 + 8;
    }

    // optional double resample_uwb_factor = 54 [default = 3];
    if (has_resample_uwb_factor()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AmclParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AmclParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AmclParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AmclParam::MergeFrom(const AmclParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_map_topic()) {
      set_use_map_topic(from.use_map_topic());
    }
    if (from.has_first_map_only()) {
      set_first_map_only(from.first_map_only());
    }
    if (from.has_gui_publish_rate()) {
      set_gui_publish_rate(from.gui_publish_rate());
    }
    if (from.has_laser_min_range()) {
      set_laser_min_range(from.laser_min_range());
    }
    if (from.has_laser_max_range()) {
      set_laser_max_range(from.laser_max_range());
    }
    if (from.has_laser_max_beams()) {
      set_laser_max_beams(from.laser_max_beams());
    }
    if (from.has_min_particles()) {
      set_min_particles(from.min_particles());
    }
    if (from.has_max_particles()) {
      set_max_particles(from.max_particles());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_kld_err()) {
      set_kld_err(from.kld_err());
    }
    if (from.has_kld_z()) {
      set_kld_z(from.kld_z());
    }
    if (from.has_laser_model()) {
      set_laser_model(from.laser_model());
    }
    if (from.has_z_hit()) {
      set_z_hit(from.z_hit());
    }
    if (from.has_z_rand()) {
      set_z_rand(from.z_rand());
    }
    if (from.has_sigma_hit()) {
      set_sigma_hit(from.sigma_hit());
    }
    if (from.has_lambda_short()) {
      set_lambda_short(from.lambda_short());
    }
    if (from.has_laser_likelihood_max_dist()) {
      set_laser_likelihood_max_dist(from.laser_likelihood_max_dist());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_do_beamskip()) {
      set_do_beamskip(from.do_beamskip());
    }
    if (from.has_beam_skip_distance()) {
      set_beam_skip_distance(from.beam_skip_distance());
    }
    if (from.has_beam_skip_threshold()) {
      set_beam_skip_threshold(from.beam_skip_threshold());
    }
    if (from.has_beam_skip_error_threshold()) {
      set_beam_skip_error_threshold(from.beam_skip_error_threshold());
    }
    if (from.has_odom_model()) {
      set_odom_model(from.odom_model());
    }
    if (from.has_odom_alpha1()) {
      set_odom_alpha1(from.odom_alpha1());
    }
    if (from.has_odom_alpha2()) {
      set_odom_alpha2(from.odom_alpha2());
    }
    if (from.has_odom_alpha3()) {
      set_odom_alpha3(from.odom_alpha3());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_odom_alpha4()) {
      set_odom_alpha4(from.odom_alpha4());
    }
    if (from.has_odom_alpha5()) {
      set_odom_alpha5(from.odom_alpha5());
    }
    if (from.has_update_min_d()) {
      set_update_min_d(from.update_min_d());
    }
    if (from.has_update_min_a()) {
      set_update_min_a(from.update_min_a());
    }
    if (from.has_resample_interval()) {
      set_resample_interval(from.resample_interval());
    }
    if (from.has_transform_tolerance()) {
      set_transform_tolerance(from.transform_tolerance());
    }
    if (from.has_recovery_alpha_slow()) {
      set_recovery_alpha_slow(from.recovery_alpha_slow());
    }
    if (from.has_recovery_alpha_fast()) {
      set_recovery_alpha_fast(from.recovery_alpha_fast());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_use_global_localization()) {
      set_use_global_localization(from.use_global_localization());
    }
    if (from.has_laser_filter_weight()) {
      set_laser_filter_weight(from.laser_filter_weight());
    }
    if (from.has_max_uwb_particles()) {
      set_max_uwb_particles(from.max_uwb_particles());
    }
    if (from.has_uwb_cov_x()) {
      set_uwb_cov_x(from.uwb_cov_x());
    }
    if (from.has_uwb_cov_y()) {
      set_uwb_cov_y(from.uwb_cov_y());
    }
    if (from.has_resample_uwb_factor()) {
      set_resample_uwb_factor(from.resample_uwb_factor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AmclParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmclParam::CopyFrom(const AmclParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmclParam::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffc7) != 0xffffffc7) return false;
  if ((_has_bits_[1] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AmclParam::Swap(AmclParam* other) {
  if (other != this) {
    std::swap(use_map_topic_, other->use_map_topic_);
    std::swap(first_map_only_, other->first_map_only_);
    std::swap(gui_publish_rate_, other->gui_publish_rate_);
    std::swap(laser_min_range_, other->laser_min_range_);
    std::swap(laser_max_range_, other->laser_max_range_);
    std::swap(laser_max_beams_, other->laser_max_beams_);
    std::swap(min_particles_, other->min_particles_);
    std::swap(max_particles_, other->max_particles_);
    std::swap(kld_err_, other->kld_err_);
    std::swap(kld_z_, other->kld_z_);
    std::swap(laser_model_, other->laser_model_);
    std::swap(z_hit_, other->z_hit_);
    std::swap(z_rand_, other->z_rand_);
    std::swap(sigma_hit_, other->sigma_hit_);
    std::swap(lambda_short_, other->lambda_short_);
    std::swap(laser_likelihood_max_dist_, other->laser_likelihood_max_dist_);
    std::swap(do_beamskip_, other->do_beamskip_);
    std::swap(beam_skip_distance_, other->beam_skip_distance_);
    std::swap(beam_skip_threshold_, other->beam_skip_threshold_);
    std::swap(beam_skip_error_threshold_, other->beam_skip_error_threshold_);
    std::swap(odom_model_, other->odom_model_);
    std::swap(odom_alpha1_, other->odom_alpha1_);
    std::swap(odom_alpha2_, other->odom_alpha2_);
    std::swap(odom_alpha3_, other->odom_alpha3_);
    std::swap(odom_alpha4_, other->odom_alpha4_);
    std::swap(odom_alpha5_, other->odom_alpha5_);
    std::swap(update_min_d_, other->update_min_d_);
    std::swap(update_min_a_, other->update_min_a_);
    std::swap(resample_interval_, other->resample_interval_);
    std::swap(transform_tolerance_, other->transform_tolerance_);
    std::swap(recovery_alpha_slow_, other->recovery_alpha_slow_);
    std::swap(recovery_alpha_fast_, other->recovery_alpha_fast_);
    std::swap(use_global_localization_, other->use_global_localization_);
    std::swap(laser_filter_weight_, other->laser_filter_weight_);
    std::swap(max_uwb_particles_, other->max_uwb_particles_);
    std::swap(uwb_cov_x_, other->uwb_cov_x_);
    std::swap(uwb_cov_y_, other->uwb_cov_y_);
    std::swap(resample_uwb_factor_, other->resample_uwb_factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AmclParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AmclParam_descriptor_;
  metadata.reflection = AmclParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
