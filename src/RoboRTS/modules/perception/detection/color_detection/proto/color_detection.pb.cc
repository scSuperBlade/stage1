// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: color_detection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "color_detection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ColorDetectionParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColorDetectionParams_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_color_5fdetection_2eproto() {
  protobuf_AddDesc_color_5fdetection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "color_detection.proto");
  GOOGLE_CHECK(file != NULL);
  ColorDetectionParams_descriptor_ = file->message_type(0);
  static const int ColorDetectionParams_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorDetectionParams, enemy_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorDetectionParams, using_hsv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorDetectionParams, enable_debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorDetectionParams, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorDetectionParams, min_pixel_number_),
  };
  ColorDetectionParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColorDetectionParams_descriptor_,
      ColorDetectionParams::default_instance_,
      ColorDetectionParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorDetectionParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorDetectionParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColorDetectionParams));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_color_5fdetection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColorDetectionParams_descriptor_, &ColorDetectionParams::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_color_5fdetection_2eproto() {
  delete ColorDetectionParams::default_instance_;
  delete ColorDetectionParams_reflection_;
}

void protobuf_AddDesc_color_5fdetection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025color_detection.proto\"\201\001\n\024ColorDetecti"
    "onParams\022\023\n\013enemy_color\030\001 \001(\r\022\021\n\tusing_h"
    "sv\030\002 \001(\010\022\024\n\014enable_debug\030\003 \001(\010\022\021\n\tthresh"
    "old\030\004 \001(\r\022\030\n\020min_pixel_number\030\005 \001(\r", 155);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "color_detection.proto", &protobuf_RegisterTypes);
  ColorDetectionParams::default_instance_ = new ColorDetectionParams();
  ColorDetectionParams::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_color_5fdetection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_color_5fdetection_2eproto {
  StaticDescriptorInitializer_color_5fdetection_2eproto() {
    protobuf_AddDesc_color_5fdetection_2eproto();
  }
} static_descriptor_initializer_color_5fdetection_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ColorDetectionParams::kEnemyColorFieldNumber;
const int ColorDetectionParams::kUsingHsvFieldNumber;
const int ColorDetectionParams::kEnableDebugFieldNumber;
const int ColorDetectionParams::kThresholdFieldNumber;
const int ColorDetectionParams::kMinPixelNumberFieldNumber;
#endif  // !_MSC_VER

ColorDetectionParams::ColorDetectionParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColorDetectionParams)
}

void ColorDetectionParams::InitAsDefaultInstance() {
}

ColorDetectionParams::ColorDetectionParams(const ColorDetectionParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ColorDetectionParams)
}

void ColorDetectionParams::SharedCtor() {
  _cached_size_ = 0;
  enemy_color_ = 0u;
  using_hsv_ = false;
  enable_debug_ = false;
  threshold_ = 0u;
  min_pixel_number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColorDetectionParams::~ColorDetectionParams() {
  // @@protoc_insertion_point(destructor:ColorDetectionParams)
  SharedDtor();
}

void ColorDetectionParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColorDetectionParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColorDetectionParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColorDetectionParams_descriptor_;
}

const ColorDetectionParams& ColorDetectionParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_color_5fdetection_2eproto();
  return *default_instance_;
}

ColorDetectionParams* ColorDetectionParams::default_instance_ = NULL;

ColorDetectionParams* ColorDetectionParams::New() const {
  return new ColorDetectionParams;
}

void ColorDetectionParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ColorDetectionParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(enemy_color_, min_pixel_number_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColorDetectionParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ColorDetectionParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 enemy_color = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemy_color_)));
          set_has_enemy_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_using_hsv;
        break;
      }

      // optional bool using_hsv = 2;
      case 2: {
        if (tag == 16) {
         parse_using_hsv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &using_hsv_)));
          set_has_using_hsv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_enable_debug;
        break;
      }

      // optional bool enable_debug = 3;
      case 3: {
        if (tag == 24) {
         parse_enable_debug:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_debug_)));
          set_has_enable_debug();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_threshold;
        break;
      }

      // optional uint32 threshold = 4;
      case 4: {
        if (tag == 32) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_min_pixel_number;
        break;
      }

      // optional uint32 min_pixel_number = 5;
      case 5: {
        if (tag == 40) {
         parse_min_pixel_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_pixel_number_)));
          set_has_min_pixel_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ColorDetectionParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ColorDetectionParams)
  return false;
#undef DO_
}

void ColorDetectionParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ColorDetectionParams)
  // optional uint32 enemy_color = 1;
  if (has_enemy_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemy_color(), output);
  }

  // optional bool using_hsv = 2;
  if (has_using_hsv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->using_hsv(), output);
  }

  // optional bool enable_debug = 3;
  if (has_enable_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_debug(), output);
  }

  // optional uint32 threshold = 4;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->threshold(), output);
  }

  // optional uint32 min_pixel_number = 5;
  if (has_min_pixel_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->min_pixel_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ColorDetectionParams)
}

::google::protobuf::uint8* ColorDetectionParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColorDetectionParams)
  // optional uint32 enemy_color = 1;
  if (has_enemy_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemy_color(), target);
  }

  // optional bool using_hsv = 2;
  if (has_using_hsv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->using_hsv(), target);
  }

  // optional bool enable_debug = 3;
  if (has_enable_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable_debug(), target);
  }

  // optional uint32 threshold = 4;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->threshold(), target);
  }

  // optional uint32 min_pixel_number = 5;
  if (has_min_pixel_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->min_pixel_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColorDetectionParams)
  return target;
}

int ColorDetectionParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 enemy_color = 1;
    if (has_enemy_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemy_color());
    }

    // optional bool using_hsv = 2;
    if (has_using_hsv()) {
      total_size += 1 + 1;
    }

    // optional bool enable_debug = 3;
    if (has_enable_debug()) {
      total_size += 1 + 1;
    }

    // optional uint32 threshold = 4;
    if (has_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->threshold());
    }

    // optional uint32 min_pixel_number = 5;
    if (has_min_pixel_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_pixel_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorDetectionParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColorDetectionParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColorDetectionParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColorDetectionParams::MergeFrom(const ColorDetectionParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemy_color()) {
      set_enemy_color(from.enemy_color());
    }
    if (from.has_using_hsv()) {
      set_using_hsv(from.using_hsv());
    }
    if (from.has_enable_debug()) {
      set_enable_debug(from.enable_debug());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
    if (from.has_min_pixel_number()) {
      set_min_pixel_number(from.min_pixel_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColorDetectionParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorDetectionParams::CopyFrom(const ColorDetectionParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorDetectionParams::IsInitialized() const {

  return true;
}

void ColorDetectionParams::Swap(ColorDetectionParams* other) {
  if (other != this) {
    std::swap(enemy_color_, other->enemy_color_);
    std::swap(using_hsv_, other->using_hsv_);
    std::swap(enable_debug_, other->enable_debug_);
    std::swap(threshold_, other->threshold_);
    std::swap(min_pixel_number_, other->min_pixel_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColorDetectionParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColorDetectionParams_descriptor_;
  metadata.reflection = ColorDetectionParams_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
