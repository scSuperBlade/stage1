// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: color_detection.proto

#ifndef PROTOBUF_color_5fdetection_2eproto__INCLUDED
#define PROTOBUF_color_5fdetection_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_color_5fdetection_2eproto();
void protobuf_AssignDesc_color_5fdetection_2eproto();
void protobuf_ShutdownFile_color_5fdetection_2eproto();

class ColorDetectionParams;

// ===================================================================

class ColorDetectionParams : public ::google::protobuf::Message {
 public:
  ColorDetectionParams();
  virtual ~ColorDetectionParams();

  ColorDetectionParams(const ColorDetectionParams& from);

  inline ColorDetectionParams& operator=(const ColorDetectionParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColorDetectionParams& default_instance();

  void Swap(ColorDetectionParams* other);

  // implements Message ----------------------------------------------

  ColorDetectionParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColorDetectionParams& from);
  void MergeFrom(const ColorDetectionParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 enemy_color = 1;
  inline bool has_enemy_color() const;
  inline void clear_enemy_color();
  static const int kEnemyColorFieldNumber = 1;
  inline ::google::protobuf::uint32 enemy_color() const;
  inline void set_enemy_color(::google::protobuf::uint32 value);

  // optional bool using_hsv = 2;
  inline bool has_using_hsv() const;
  inline void clear_using_hsv();
  static const int kUsingHsvFieldNumber = 2;
  inline bool using_hsv() const;
  inline void set_using_hsv(bool value);

  // optional bool enable_debug = 3;
  inline bool has_enable_debug() const;
  inline void clear_enable_debug();
  static const int kEnableDebugFieldNumber = 3;
  inline bool enable_debug() const;
  inline void set_enable_debug(bool value);

  // optional uint32 threshold = 4;
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 4;
  inline ::google::protobuf::uint32 threshold() const;
  inline void set_threshold(::google::protobuf::uint32 value);

  // optional uint32 min_pixel_number = 5;
  inline bool has_min_pixel_number() const;
  inline void clear_min_pixel_number();
  static const int kMinPixelNumberFieldNumber = 5;
  inline ::google::protobuf::uint32 min_pixel_number() const;
  inline void set_min_pixel_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ColorDetectionParams)
 private:
  inline void set_has_enemy_color();
  inline void clear_has_enemy_color();
  inline void set_has_using_hsv();
  inline void clear_has_using_hsv();
  inline void set_has_enable_debug();
  inline void clear_has_enable_debug();
  inline void set_has_threshold();
  inline void clear_has_threshold();
  inline void set_has_min_pixel_number();
  inline void clear_has_min_pixel_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 enemy_color_;
  bool using_hsv_;
  bool enable_debug_;
  ::google::protobuf::uint32 threshold_;
  ::google::protobuf::uint32 min_pixel_number_;
  friend void  protobuf_AddDesc_color_5fdetection_2eproto();
  friend void protobuf_AssignDesc_color_5fdetection_2eproto();
  friend void protobuf_ShutdownFile_color_5fdetection_2eproto();

  void InitAsDefaultInstance();
  static ColorDetectionParams* default_instance_;
};
// ===================================================================


// ===================================================================

// ColorDetectionParams

// optional uint32 enemy_color = 1;
inline bool ColorDetectionParams::has_enemy_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColorDetectionParams::set_has_enemy_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColorDetectionParams::clear_has_enemy_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColorDetectionParams::clear_enemy_color() {
  enemy_color_ = 0u;
  clear_has_enemy_color();
}
inline ::google::protobuf::uint32 ColorDetectionParams::enemy_color() const {
  // @@protoc_insertion_point(field_get:ColorDetectionParams.enemy_color)
  return enemy_color_;
}
inline void ColorDetectionParams::set_enemy_color(::google::protobuf::uint32 value) {
  set_has_enemy_color();
  enemy_color_ = value;
  // @@protoc_insertion_point(field_set:ColorDetectionParams.enemy_color)
}

// optional bool using_hsv = 2;
inline bool ColorDetectionParams::has_using_hsv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColorDetectionParams::set_has_using_hsv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColorDetectionParams::clear_has_using_hsv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColorDetectionParams::clear_using_hsv() {
  using_hsv_ = false;
  clear_has_using_hsv();
}
inline bool ColorDetectionParams::using_hsv() const {
  // @@protoc_insertion_point(field_get:ColorDetectionParams.using_hsv)
  return using_hsv_;
}
inline void ColorDetectionParams::set_using_hsv(bool value) {
  set_has_using_hsv();
  using_hsv_ = value;
  // @@protoc_insertion_point(field_set:ColorDetectionParams.using_hsv)
}

// optional bool enable_debug = 3;
inline bool ColorDetectionParams::has_enable_debug() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColorDetectionParams::set_has_enable_debug() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColorDetectionParams::clear_has_enable_debug() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColorDetectionParams::clear_enable_debug() {
  enable_debug_ = false;
  clear_has_enable_debug();
}
inline bool ColorDetectionParams::enable_debug() const {
  // @@protoc_insertion_point(field_get:ColorDetectionParams.enable_debug)
  return enable_debug_;
}
inline void ColorDetectionParams::set_enable_debug(bool value) {
  set_has_enable_debug();
  enable_debug_ = value;
  // @@protoc_insertion_point(field_set:ColorDetectionParams.enable_debug)
}

// optional uint32 threshold = 4;
inline bool ColorDetectionParams::has_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ColorDetectionParams::set_has_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ColorDetectionParams::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ColorDetectionParams::clear_threshold() {
  threshold_ = 0u;
  clear_has_threshold();
}
inline ::google::protobuf::uint32 ColorDetectionParams::threshold() const {
  // @@protoc_insertion_point(field_get:ColorDetectionParams.threshold)
  return threshold_;
}
inline void ColorDetectionParams::set_threshold(::google::protobuf::uint32 value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:ColorDetectionParams.threshold)
}

// optional uint32 min_pixel_number = 5;
inline bool ColorDetectionParams::has_min_pixel_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ColorDetectionParams::set_has_min_pixel_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ColorDetectionParams::clear_has_min_pixel_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ColorDetectionParams::clear_min_pixel_number() {
  min_pixel_number_ = 0u;
  clear_has_min_pixel_number();
}
inline ::google::protobuf::uint32 ColorDetectionParams::min_pixel_number() const {
  // @@protoc_insertion_point(field_get:ColorDetectionParams.min_pixel_number)
  return min_pixel_number_;
}
inline void ColorDetectionParams::set_min_pixel_number(::google::protobuf::uint32 value) {
  set_has_min_pixel_number();
  min_pixel_number_ = value;
  // @@protoc_insertion_point(field_set:ColorDetectionParams.min_pixel_number)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_color_5fdetection_2eproto__INCLUDED
