// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clustering.proto

#ifndef PROTOBUF_clustering_2eproto__INCLUDED
#define PROTOBUF_clustering_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_clustering_2eproto();
void protobuf_AssignDesc_clustering_2eproto();
void protobuf_ShutdownFile_clustering_2eproto();

class Threshold;
class ArmorSize;
class ConstraintSetConfig;

enum EnemyColor {
  BLUE = 0,
  RED = 1
};
bool EnemyColor_IsValid(int value);
const EnemyColor EnemyColor_MIN = BLUE;
const EnemyColor EnemyColor_MAX = RED;
const int EnemyColor_ARRAYSIZE = EnemyColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnemyColor_descriptor();
inline const ::std::string& EnemyColor_Name(EnemyColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnemyColor_descriptor(), value);
}
inline bool EnemyColor_Parse(
    const ::std::string& name, EnemyColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnemyColor>(
    EnemyColor_descriptor(), name, value);
}
// ===================================================================

class Threshold : public ::google::protobuf::Message {
 public:
  Threshold();
  virtual ~Threshold();

  Threshold(const Threshold& from);

  inline Threshold& operator=(const Threshold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Threshold& default_instance();

  void Swap(Threshold* other);

  // implements Message ----------------------------------------------

  Threshold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Threshold& from);
  void MergeFrom(const Threshold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float light_max_aspect_ratio = 1;
  inline bool has_light_max_aspect_ratio() const;
  inline void clear_light_max_aspect_ratio();
  static const int kLightMaxAspectRatioFieldNumber = 1;
  inline float light_max_aspect_ratio() const;
  inline void set_light_max_aspect_ratio(float value);

  // required float light_min_area = 2;
  inline bool has_light_min_area() const;
  inline void clear_light_min_area();
  static const int kLightMinAreaFieldNumber = 2;
  inline float light_min_area() const;
  inline void set_light_min_area(float value);

  // required float light_max_angle = 3;
  inline bool has_light_max_angle() const;
  inline void clear_light_max_angle();
  static const int kLightMaxAngleFieldNumber = 3;
  inline float light_max_angle() const;
  inline void set_light_max_angle(float value);

  // required float light_max_angle_diff = 4;
  inline bool has_light_max_angle_diff() const;
  inline void clear_light_max_angle_diff();
  static const int kLightMaxAngleDiffFieldNumber = 4;
  inline float light_max_angle_diff() const;
  inline void set_light_max_angle_diff(float value);

  // required float armor_max_angle = 5;
  inline bool has_armor_max_angle() const;
  inline void clear_armor_max_angle();
  static const int kArmorMaxAngleFieldNumber = 5;
  inline float armor_max_angle() const;
  inline void set_armor_max_angle(float value);

  // required float armor_min_area = 6;
  inline bool has_armor_min_area() const;
  inline void clear_armor_min_area();
  static const int kArmorMinAreaFieldNumber = 6;
  inline float armor_min_area() const;
  inline void set_armor_min_area(float value);

  // required float armor_max_aspect_ratio = 7;
  inline bool has_armor_max_aspect_ratio() const;
  inline void clear_armor_max_aspect_ratio();
  static const int kArmorMaxAspectRatioFieldNumber = 7;
  inline float armor_max_aspect_ratio() const;
  inline void set_armor_max_aspect_ratio(float value);

  // required float armor_max_pixel_val = 8;
  inline bool has_armor_max_pixel_val() const;
  inline void clear_armor_max_pixel_val();
  static const int kArmorMaxPixelValFieldNumber = 8;
  inline float armor_max_pixel_val() const;
  inline void set_armor_max_pixel_val(float value);

  // required float armor_max_stddev = 9;
  inline bool has_armor_max_stddev() const;
  inline void clear_armor_max_stddev();
  static const int kArmorMaxStddevFieldNumber = 9;
  inline float armor_max_stddev() const;
  inline void set_armor_max_stddev(float value);

  // @@protoc_insertion_point(class_scope:Threshold)
 private:
  inline void set_has_light_max_aspect_ratio();
  inline void clear_has_light_max_aspect_ratio();
  inline void set_has_light_min_area();
  inline void clear_has_light_min_area();
  inline void set_has_light_max_angle();
  inline void clear_has_light_max_angle();
  inline void set_has_light_max_angle_diff();
  inline void clear_has_light_max_angle_diff();
  inline void set_has_armor_max_angle();
  inline void clear_has_armor_max_angle();
  inline void set_has_armor_min_area();
  inline void clear_has_armor_min_area();
  inline void set_has_armor_max_aspect_ratio();
  inline void clear_has_armor_max_aspect_ratio();
  inline void set_has_armor_max_pixel_val();
  inline void clear_has_armor_max_pixel_val();
  inline void set_has_armor_max_stddev();
  inline void clear_has_armor_max_stddev();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float light_max_aspect_ratio_;
  float light_min_area_;
  float light_max_angle_;
  float light_max_angle_diff_;
  float armor_max_angle_;
  float armor_min_area_;
  float armor_max_aspect_ratio_;
  float armor_max_pixel_val_;
  float armor_max_stddev_;
  friend void  protobuf_AddDesc_clustering_2eproto();
  friend void protobuf_AssignDesc_clustering_2eproto();
  friend void protobuf_ShutdownFile_clustering_2eproto();

  void InitAsDefaultInstance();
  static Threshold* default_instance_;
};
// -------------------------------------------------------------------

class ArmorSize : public ::google::protobuf::Message {
 public:
  ArmorSize();
  virtual ~ArmorSize();

  ArmorSize(const ArmorSize& from);

  inline ArmorSize& operator=(const ArmorSize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArmorSize& default_instance();

  void Swap(ArmorSize* other);

  // implements Message ----------------------------------------------

  ArmorSize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArmorSize& from);
  void MergeFrom(const ArmorSize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline float width() const;
  inline void set_width(float value);

  // required float height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline float height() const;
  inline void set_height(float value);

  // @@protoc_insertion_point(class_scope:ArmorSize)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float width_;
  float height_;
  friend void  protobuf_AddDesc_clustering_2eproto();
  friend void protobuf_AssignDesc_clustering_2eproto();
  friend void protobuf_ShutdownFile_clustering_2eproto();

  void InitAsDefaultInstance();
  static ArmorSize* default_instance_;
};
// -------------------------------------------------------------------

class ConstraintSetConfig : public ::google::protobuf::Message {
 public:
  ConstraintSetConfig();
  virtual ~ConstraintSetConfig();

  ConstraintSetConfig(const ConstraintSetConfig& from);

  inline ConstraintSetConfig& operator=(const ConstraintSetConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstraintSetConfig& default_instance();

  void Swap(ConstraintSetConfig* other);

  // implements Message ----------------------------------------------

  ConstraintSetConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConstraintSetConfig& from);
  void MergeFrom(const ConstraintSetConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 init_camera_id = 1;
  inline bool has_init_camera_id() const;
  inline void clear_init_camera_id();
  static const int kInitCameraIdFieldNumber = 1;
  inline ::google::protobuf::int32 init_camera_id() const;
  inline void set_init_camera_id(::google::protobuf::int32 value);

  // required bool enable_debug = 2;
  inline bool has_enable_debug() const;
  inline void clear_enable_debug();
  static const int kEnableDebugFieldNumber = 2;
  inline bool enable_debug() const;
  inline void set_enable_debug(bool value);

  // required bool enable_neon = 3;
  inline bool has_enable_neon() const;
  inline void clear_enable_neon();
  static const int kEnableNeonFieldNumber = 3;
  inline bool enable_neon() const;
  inline void set_enable_neon(bool value);

  // required .Threshold threshold = 4;
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 4;
  inline const ::Threshold& threshold() const;
  inline ::Threshold* mutable_threshold();
  inline ::Threshold* release_threshold();
  inline void set_allocated_threshold(::Threshold* threshold);

  // required .ArmorSize armor_size = 5;
  inline bool has_armor_size() const;
  inline void clear_armor_size();
  static const int kArmorSizeFieldNumber = 5;
  inline const ::ArmorSize& armor_size() const;
  inline ::ArmorSize* mutable_armor_size();
  inline ::ArmorSize* release_armor_size();
  inline void set_allocated_armor_size(::ArmorSize* armor_size);

  // required .EnemyColor enemy_color = 6;
  inline bool has_enemy_color() const;
  inline void clear_enemy_color();
  static const int kEnemyColorFieldNumber = 6;
  inline ::EnemyColor enemy_color() const;
  inline void set_enemy_color(::EnemyColor value);

  // required int32 gimbal_offset_z = 7;
  inline bool has_gimbal_offset_z() const;
  inline void clear_gimbal_offset_z();
  static const int kGimbalOffsetZFieldNumber = 7;
  inline ::google::protobuf::int32 gimbal_offset_z() const;
  inline void set_gimbal_offset_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ConstraintSetConfig)
 private:
  inline void set_has_init_camera_id();
  inline void clear_has_init_camera_id();
  inline void set_has_enable_debug();
  inline void clear_has_enable_debug();
  inline void set_has_enable_neon();
  inline void clear_has_enable_neon();
  inline void set_has_threshold();
  inline void clear_has_threshold();
  inline void set_has_armor_size();
  inline void clear_has_armor_size();
  inline void set_has_enemy_color();
  inline void clear_has_enemy_color();
  inline void set_has_gimbal_offset_z();
  inline void clear_has_gimbal_offset_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 init_camera_id_;
  bool enable_debug_;
  bool enable_neon_;
  ::Threshold* threshold_;
  ::ArmorSize* armor_size_;
  int enemy_color_;
  ::google::protobuf::int32 gimbal_offset_z_;
  friend void  protobuf_AddDesc_clustering_2eproto();
  friend void protobuf_AssignDesc_clustering_2eproto();
  friend void protobuf_ShutdownFile_clustering_2eproto();

  void InitAsDefaultInstance();
  static ConstraintSetConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// Threshold

// required float light_max_aspect_ratio = 1;
inline bool Threshold::has_light_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Threshold::set_has_light_max_aspect_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Threshold::clear_has_light_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Threshold::clear_light_max_aspect_ratio() {
  light_max_aspect_ratio_ = 0;
  clear_has_light_max_aspect_ratio();
}
inline float Threshold::light_max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:Threshold.light_max_aspect_ratio)
  return light_max_aspect_ratio_;
}
inline void Threshold::set_light_max_aspect_ratio(float value) {
  set_has_light_max_aspect_ratio();
  light_max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:Threshold.light_max_aspect_ratio)
}

// required float light_min_area = 2;
inline bool Threshold::has_light_min_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Threshold::set_has_light_min_area() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Threshold::clear_has_light_min_area() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Threshold::clear_light_min_area() {
  light_min_area_ = 0;
  clear_has_light_min_area();
}
inline float Threshold::light_min_area() const {
  // @@protoc_insertion_point(field_get:Threshold.light_min_area)
  return light_min_area_;
}
inline void Threshold::set_light_min_area(float value) {
  set_has_light_min_area();
  light_min_area_ = value;
  // @@protoc_insertion_point(field_set:Threshold.light_min_area)
}

// required float light_max_angle = 3;
inline bool Threshold::has_light_max_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Threshold::set_has_light_max_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Threshold::clear_has_light_max_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Threshold::clear_light_max_angle() {
  light_max_angle_ = 0;
  clear_has_light_max_angle();
}
inline float Threshold::light_max_angle() const {
  // @@protoc_insertion_point(field_get:Threshold.light_max_angle)
  return light_max_angle_;
}
inline void Threshold::set_light_max_angle(float value) {
  set_has_light_max_angle();
  light_max_angle_ = value;
  // @@protoc_insertion_point(field_set:Threshold.light_max_angle)
}

// required float light_max_angle_diff = 4;
inline bool Threshold::has_light_max_angle_diff() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Threshold::set_has_light_max_angle_diff() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Threshold::clear_has_light_max_angle_diff() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Threshold::clear_light_max_angle_diff() {
  light_max_angle_diff_ = 0;
  clear_has_light_max_angle_diff();
}
inline float Threshold::light_max_angle_diff() const {
  // @@protoc_insertion_point(field_get:Threshold.light_max_angle_diff)
  return light_max_angle_diff_;
}
inline void Threshold::set_light_max_angle_diff(float value) {
  set_has_light_max_angle_diff();
  light_max_angle_diff_ = value;
  // @@protoc_insertion_point(field_set:Threshold.light_max_angle_diff)
}

// required float armor_max_angle = 5;
inline bool Threshold::has_armor_max_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Threshold::set_has_armor_max_angle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Threshold::clear_has_armor_max_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Threshold::clear_armor_max_angle() {
  armor_max_angle_ = 0;
  clear_has_armor_max_angle();
}
inline float Threshold::armor_max_angle() const {
  // @@protoc_insertion_point(field_get:Threshold.armor_max_angle)
  return armor_max_angle_;
}
inline void Threshold::set_armor_max_angle(float value) {
  set_has_armor_max_angle();
  armor_max_angle_ = value;
  // @@protoc_insertion_point(field_set:Threshold.armor_max_angle)
}

// required float armor_min_area = 6;
inline bool Threshold::has_armor_min_area() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Threshold::set_has_armor_min_area() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Threshold::clear_has_armor_min_area() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Threshold::clear_armor_min_area() {
  armor_min_area_ = 0;
  clear_has_armor_min_area();
}
inline float Threshold::armor_min_area() const {
  // @@protoc_insertion_point(field_get:Threshold.armor_min_area)
  return armor_min_area_;
}
inline void Threshold::set_armor_min_area(float value) {
  set_has_armor_min_area();
  armor_min_area_ = value;
  // @@protoc_insertion_point(field_set:Threshold.armor_min_area)
}

// required float armor_max_aspect_ratio = 7;
inline bool Threshold::has_armor_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Threshold::set_has_armor_max_aspect_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Threshold::clear_has_armor_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Threshold::clear_armor_max_aspect_ratio() {
  armor_max_aspect_ratio_ = 0;
  clear_has_armor_max_aspect_ratio();
}
inline float Threshold::armor_max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:Threshold.armor_max_aspect_ratio)
  return armor_max_aspect_ratio_;
}
inline void Threshold::set_armor_max_aspect_ratio(float value) {
  set_has_armor_max_aspect_ratio();
  armor_max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:Threshold.armor_max_aspect_ratio)
}

// required float armor_max_pixel_val = 8;
inline bool Threshold::has_armor_max_pixel_val() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Threshold::set_has_armor_max_pixel_val() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Threshold::clear_has_armor_max_pixel_val() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Threshold::clear_armor_max_pixel_val() {
  armor_max_pixel_val_ = 0;
  clear_has_armor_max_pixel_val();
}
inline float Threshold::armor_max_pixel_val() const {
  // @@protoc_insertion_point(field_get:Threshold.armor_max_pixel_val)
  return armor_max_pixel_val_;
}
inline void Threshold::set_armor_max_pixel_val(float value) {
  set_has_armor_max_pixel_val();
  armor_max_pixel_val_ = value;
  // @@protoc_insertion_point(field_set:Threshold.armor_max_pixel_val)
}

// required float armor_max_stddev = 9;
inline bool Threshold::has_armor_max_stddev() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Threshold::set_has_armor_max_stddev() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Threshold::clear_has_armor_max_stddev() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Threshold::clear_armor_max_stddev() {
  armor_max_stddev_ = 0;
  clear_has_armor_max_stddev();
}
inline float Threshold::armor_max_stddev() const {
  // @@protoc_insertion_point(field_get:Threshold.armor_max_stddev)
  return armor_max_stddev_;
}
inline void Threshold::set_armor_max_stddev(float value) {
  set_has_armor_max_stddev();
  armor_max_stddev_ = value;
  // @@protoc_insertion_point(field_set:Threshold.armor_max_stddev)
}

// -------------------------------------------------------------------

// ArmorSize

// required float width = 1;
inline bool ArmorSize::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArmorSize::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArmorSize::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArmorSize::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float ArmorSize::width() const {
  // @@protoc_insertion_point(field_get:ArmorSize.width)
  return width_;
}
inline void ArmorSize::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ArmorSize.width)
}

// required float height = 2;
inline bool ArmorSize::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArmorSize::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArmorSize::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArmorSize::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float ArmorSize::height() const {
  // @@protoc_insertion_point(field_get:ArmorSize.height)
  return height_;
}
inline void ArmorSize::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ArmorSize.height)
}

// -------------------------------------------------------------------

// ConstraintSetConfig

// required int32 init_camera_id = 1;
inline bool ConstraintSetConfig::has_init_camera_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConstraintSetConfig::set_has_init_camera_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConstraintSetConfig::clear_has_init_camera_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConstraintSetConfig::clear_init_camera_id() {
  init_camera_id_ = 0;
  clear_has_init_camera_id();
}
inline ::google::protobuf::int32 ConstraintSetConfig::init_camera_id() const {
  // @@protoc_insertion_point(field_get:ConstraintSetConfig.init_camera_id)
  return init_camera_id_;
}
inline void ConstraintSetConfig::set_init_camera_id(::google::protobuf::int32 value) {
  set_has_init_camera_id();
  init_camera_id_ = value;
  // @@protoc_insertion_point(field_set:ConstraintSetConfig.init_camera_id)
}

// required bool enable_debug = 2;
inline bool ConstraintSetConfig::has_enable_debug() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConstraintSetConfig::set_has_enable_debug() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConstraintSetConfig::clear_has_enable_debug() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConstraintSetConfig::clear_enable_debug() {
  enable_debug_ = false;
  clear_has_enable_debug();
}
inline bool ConstraintSetConfig::enable_debug() const {
  // @@protoc_insertion_point(field_get:ConstraintSetConfig.enable_debug)
  return enable_debug_;
}
inline void ConstraintSetConfig::set_enable_debug(bool value) {
  set_has_enable_debug();
  enable_debug_ = value;
  // @@protoc_insertion_point(field_set:ConstraintSetConfig.enable_debug)
}

// required bool enable_neon = 3;
inline bool ConstraintSetConfig::has_enable_neon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConstraintSetConfig::set_has_enable_neon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConstraintSetConfig::clear_has_enable_neon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConstraintSetConfig::clear_enable_neon() {
  enable_neon_ = false;
  clear_has_enable_neon();
}
inline bool ConstraintSetConfig::enable_neon() const {
  // @@protoc_insertion_point(field_get:ConstraintSetConfig.enable_neon)
  return enable_neon_;
}
inline void ConstraintSetConfig::set_enable_neon(bool value) {
  set_has_enable_neon();
  enable_neon_ = value;
  // @@protoc_insertion_point(field_set:ConstraintSetConfig.enable_neon)
}

// required .Threshold threshold = 4;
inline bool ConstraintSetConfig::has_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConstraintSetConfig::set_has_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConstraintSetConfig::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConstraintSetConfig::clear_threshold() {
  if (threshold_ != NULL) threshold_->::Threshold::Clear();
  clear_has_threshold();
}
inline const ::Threshold& ConstraintSetConfig::threshold() const {
  // @@protoc_insertion_point(field_get:ConstraintSetConfig.threshold)
  return threshold_ != NULL ? *threshold_ : *default_instance_->threshold_;
}
inline ::Threshold* ConstraintSetConfig::mutable_threshold() {
  set_has_threshold();
  if (threshold_ == NULL) threshold_ = new ::Threshold;
  // @@protoc_insertion_point(field_mutable:ConstraintSetConfig.threshold)
  return threshold_;
}
inline ::Threshold* ConstraintSetConfig::release_threshold() {
  clear_has_threshold();
  ::Threshold* temp = threshold_;
  threshold_ = NULL;
  return temp;
}
inline void ConstraintSetConfig::set_allocated_threshold(::Threshold* threshold) {
  delete threshold_;
  threshold_ = threshold;
  if (threshold) {
    set_has_threshold();
  } else {
    clear_has_threshold();
  }
  // @@protoc_insertion_point(field_set_allocated:ConstraintSetConfig.threshold)
}

// required .ArmorSize armor_size = 5;
inline bool ConstraintSetConfig::has_armor_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConstraintSetConfig::set_has_armor_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConstraintSetConfig::clear_has_armor_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConstraintSetConfig::clear_armor_size() {
  if (armor_size_ != NULL) armor_size_->::ArmorSize::Clear();
  clear_has_armor_size();
}
inline const ::ArmorSize& ConstraintSetConfig::armor_size() const {
  // @@protoc_insertion_point(field_get:ConstraintSetConfig.armor_size)
  return armor_size_ != NULL ? *armor_size_ : *default_instance_->armor_size_;
}
inline ::ArmorSize* ConstraintSetConfig::mutable_armor_size() {
  set_has_armor_size();
  if (armor_size_ == NULL) armor_size_ = new ::ArmorSize;
  // @@protoc_insertion_point(field_mutable:ConstraintSetConfig.armor_size)
  return armor_size_;
}
inline ::ArmorSize* ConstraintSetConfig::release_armor_size() {
  clear_has_armor_size();
  ::ArmorSize* temp = armor_size_;
  armor_size_ = NULL;
  return temp;
}
inline void ConstraintSetConfig::set_allocated_armor_size(::ArmorSize* armor_size) {
  delete armor_size_;
  armor_size_ = armor_size;
  if (armor_size) {
    set_has_armor_size();
  } else {
    clear_has_armor_size();
  }
  // @@protoc_insertion_point(field_set_allocated:ConstraintSetConfig.armor_size)
}

// required .EnemyColor enemy_color = 6;
inline bool ConstraintSetConfig::has_enemy_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConstraintSetConfig::set_has_enemy_color() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConstraintSetConfig::clear_has_enemy_color() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConstraintSetConfig::clear_enemy_color() {
  enemy_color_ = 0;
  clear_has_enemy_color();
}
inline ::EnemyColor ConstraintSetConfig::enemy_color() const {
  // @@protoc_insertion_point(field_get:ConstraintSetConfig.enemy_color)
  return static_cast< ::EnemyColor >(enemy_color_);
}
inline void ConstraintSetConfig::set_enemy_color(::EnemyColor value) {
  assert(::EnemyColor_IsValid(value));
  set_has_enemy_color();
  enemy_color_ = value;
  // @@protoc_insertion_point(field_set:ConstraintSetConfig.enemy_color)
}

// required int32 gimbal_offset_z = 7;
inline bool ConstraintSetConfig::has_gimbal_offset_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConstraintSetConfig::set_has_gimbal_offset_z() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConstraintSetConfig::clear_has_gimbal_offset_z() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConstraintSetConfig::clear_gimbal_offset_z() {
  gimbal_offset_z_ = 0;
  clear_has_gimbal_offset_z();
}
inline ::google::protobuf::int32 ConstraintSetConfig::gimbal_offset_z() const {
  // @@protoc_insertion_point(field_get:ConstraintSetConfig.gimbal_offset_z)
  return gimbal_offset_z_;
}
inline void ConstraintSetConfig::set_gimbal_offset_z(::google::protobuf::int32 value) {
  set_has_gimbal_offset_z();
  gimbal_offset_z_ = value;
  // @@protoc_insertion_point(field_set:ConstraintSetConfig.gimbal_offset_z)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::EnemyColor> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EnemyColor>() {
  return ::EnemyColor_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_clustering_2eproto__INCLUDED
