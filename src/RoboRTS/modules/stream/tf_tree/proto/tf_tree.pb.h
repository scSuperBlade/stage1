// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tf_tree.proto

#ifndef PROTOBUF_tf_5ftree_2eproto__INCLUDED
#define PROTOBUF_tf_5ftree_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tf_5ftree_2eproto();
void protobuf_AssignDesc_tf_5ftree_2eproto();
void protobuf_ShutdownFile_tf_5ftree_2eproto();

class Rotation;
class Translation;
class Transformation;
class CoordinateTrans;

// ===================================================================

class Rotation : public ::google::protobuf::Message {
 public:
  Rotation();
  virtual ~Rotation();

  Rotation(const Rotation& from);

  inline Rotation& operator=(const Rotation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rotation& default_instance();

  void Swap(Rotation* other);

  // implements Message ----------------------------------------------

  Rotation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rotation& from);
  void MergeFrom(const Rotation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float pitch = 1;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 1;
  inline float pitch() const;
  inline void set_pitch(float value);

  // optional float yaw = 2;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 2;
  inline float yaw() const;
  inline void set_yaw(float value);

  // optional float roll = 3;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 3;
  inline float roll() const;
  inline void set_roll(float value);

  // @@protoc_insertion_point(class_scope:Rotation)
 private:
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_roll();
  inline void clear_has_roll();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float pitch_;
  float yaw_;
  float roll_;
  friend void  protobuf_AddDesc_tf_5ftree_2eproto();
  friend void protobuf_AssignDesc_tf_5ftree_2eproto();
  friend void protobuf_ShutdownFile_tf_5ftree_2eproto();

  void InitAsDefaultInstance();
  static Rotation* default_instance_;
};
// -------------------------------------------------------------------

class Translation : public ::google::protobuf::Message {
 public:
  Translation();
  virtual ~Translation();

  Translation(const Translation& from);

  inline Translation& operator=(const Translation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Translation& default_instance();

  void Swap(Translation* other);

  // implements Message ----------------------------------------------

  Translation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Translation& from);
  void MergeFrom(const Translation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:Translation)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_tf_5ftree_2eproto();
  friend void protobuf_AssignDesc_tf_5ftree_2eproto();
  friend void protobuf_ShutdownFile_tf_5ftree_2eproto();

  void InitAsDefaultInstance();
  static Translation* default_instance_;
};
// -------------------------------------------------------------------

class Transformation : public ::google::protobuf::Message {
 public:
  Transformation();
  virtual ~Transformation();

  Transformation(const Transformation& from);

  inline Transformation& operator=(const Transformation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transformation& default_instance();

  void Swap(Transformation* other);

  // implements Message ----------------------------------------------

  Transformation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transformation& from);
  void MergeFrom(const Transformation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sensor = 1;
  inline bool has_sensor() const;
  inline void clear_sensor();
  static const int kSensorFieldNumber = 1;
  inline const ::std::string& sensor() const;
  inline void set_sensor(const ::std::string& value);
  inline void set_sensor(const char* value);
  inline void set_sensor(const char* value, size_t size);
  inline ::std::string* mutable_sensor();
  inline ::std::string* release_sensor();
  inline void set_allocated_sensor(::std::string* sensor);

  // optional string base = 2;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 2;
  inline const ::std::string& base() const;
  inline void set_base(const ::std::string& value);
  inline void set_base(const char* value);
  inline void set_base(const char* value, size_t size);
  inline ::std::string* mutable_base();
  inline ::std::string* release_base();
  inline void set_allocated_base(::std::string* base);

  // optional .Rotation rotation = 3;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 3;
  inline const ::Rotation& rotation() const;
  inline ::Rotation* mutable_rotation();
  inline ::Rotation* release_rotation();
  inline void set_allocated_rotation(::Rotation* rotation);

  // optional .Translation translation = 4;
  inline bool has_translation() const;
  inline void clear_translation();
  static const int kTranslationFieldNumber = 4;
  inline const ::Translation& translation() const;
  inline ::Translation* mutable_translation();
  inline ::Translation* release_translation();
  inline void set_allocated_translation(::Translation* translation);

  // @@protoc_insertion_point(class_scope:Transformation)
 private:
  inline void set_has_sensor();
  inline void clear_has_sensor();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_translation();
  inline void clear_has_translation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sensor_;
  ::std::string* base_;
  ::Rotation* rotation_;
  ::Translation* translation_;
  friend void  protobuf_AddDesc_tf_5ftree_2eproto();
  friend void protobuf_AssignDesc_tf_5ftree_2eproto();
  friend void protobuf_ShutdownFile_tf_5ftree_2eproto();

  void InitAsDefaultInstance();
  static Transformation* default_instance_;
};
// -------------------------------------------------------------------

class CoordinateTrans : public ::google::protobuf::Message {
 public:
  CoordinateTrans();
  virtual ~CoordinateTrans();

  CoordinateTrans(const CoordinateTrans& from);

  inline CoordinateTrans& operator=(const CoordinateTrans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoordinateTrans& default_instance();

  void Swap(CoordinateTrans* other);

  // implements Message ----------------------------------------------

  CoordinateTrans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CoordinateTrans& from);
  void MergeFrom(const CoordinateTrans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .Transformation transformation = 2;
  inline int transformation_size() const;
  inline void clear_transformation();
  static const int kTransformationFieldNumber = 2;
  inline const ::Transformation& transformation(int index) const;
  inline ::Transformation* mutable_transformation(int index);
  inline ::Transformation* add_transformation();
  inline const ::google::protobuf::RepeatedPtrField< ::Transformation >&
      transformation() const;
  inline ::google::protobuf::RepeatedPtrField< ::Transformation >*
      mutable_transformation();

  // @@protoc_insertion_point(class_scope:CoordinateTrans)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::Transformation > transformation_;
  friend void  protobuf_AddDesc_tf_5ftree_2eproto();
  friend void protobuf_AssignDesc_tf_5ftree_2eproto();
  friend void protobuf_ShutdownFile_tf_5ftree_2eproto();

  void InitAsDefaultInstance();
  static CoordinateTrans* default_instance_;
};
// ===================================================================


// ===================================================================

// Rotation

// optional float pitch = 1;
inline bool Rotation::has_pitch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rotation::set_has_pitch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rotation::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rotation::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline float Rotation::pitch() const {
  // @@protoc_insertion_point(field_get:Rotation.pitch)
  return pitch_;
}
inline void Rotation::set_pitch(float value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:Rotation.pitch)
}

// optional float yaw = 2;
inline bool Rotation::has_yaw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rotation::set_has_yaw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rotation::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rotation::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float Rotation::yaw() const {
  // @@protoc_insertion_point(field_get:Rotation.yaw)
  return yaw_;
}
inline void Rotation::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:Rotation.yaw)
}

// optional float roll = 3;
inline bool Rotation::has_roll() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rotation::set_has_roll() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rotation::clear_has_roll() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rotation::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline float Rotation::roll() const {
  // @@protoc_insertion_point(field_get:Rotation.roll)
  return roll_;
}
inline void Rotation::set_roll(float value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:Rotation.roll)
}

// -------------------------------------------------------------------

// Translation

// optional float x = 1;
inline bool Translation::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Translation::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Translation::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Translation::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Translation::x() const {
  // @@protoc_insertion_point(field_get:Translation.x)
  return x_;
}
inline void Translation::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Translation.x)
}

// optional float y = 2;
inline bool Translation::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Translation::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Translation::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Translation::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Translation::y() const {
  // @@protoc_insertion_point(field_get:Translation.y)
  return y_;
}
inline void Translation::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Translation.y)
}

// optional float z = 3;
inline bool Translation::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Translation::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Translation::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Translation::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Translation::z() const {
  // @@protoc_insertion_point(field_get:Translation.z)
  return z_;
}
inline void Translation::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Translation.z)
}

// -------------------------------------------------------------------

// Transformation

// optional string sensor = 1;
inline bool Transformation::has_sensor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transformation::set_has_sensor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transformation::clear_has_sensor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transformation::clear_sensor() {
  if (sensor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sensor_->clear();
  }
  clear_has_sensor();
}
inline const ::std::string& Transformation::sensor() const {
  // @@protoc_insertion_point(field_get:Transformation.sensor)
  return *sensor_;
}
inline void Transformation::set_sensor(const ::std::string& value) {
  set_has_sensor();
  if (sensor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sensor_ = new ::std::string;
  }
  sensor_->assign(value);
  // @@protoc_insertion_point(field_set:Transformation.sensor)
}
inline void Transformation::set_sensor(const char* value) {
  set_has_sensor();
  if (sensor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sensor_ = new ::std::string;
  }
  sensor_->assign(value);
  // @@protoc_insertion_point(field_set_char:Transformation.sensor)
}
inline void Transformation::set_sensor(const char* value, size_t size) {
  set_has_sensor();
  if (sensor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sensor_ = new ::std::string;
  }
  sensor_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Transformation.sensor)
}
inline ::std::string* Transformation::mutable_sensor() {
  set_has_sensor();
  if (sensor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sensor_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Transformation.sensor)
  return sensor_;
}
inline ::std::string* Transformation::release_sensor() {
  clear_has_sensor();
  if (sensor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sensor_;
    sensor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Transformation::set_allocated_sensor(::std::string* sensor) {
  if (sensor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sensor_;
  }
  if (sensor) {
    set_has_sensor();
    sensor_ = sensor;
  } else {
    clear_has_sensor();
    sensor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Transformation.sensor)
}

// optional string base = 2;
inline bool Transformation::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transformation::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transformation::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transformation::clear_base() {
  if (base_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    base_->clear();
  }
  clear_has_base();
}
inline const ::std::string& Transformation::base() const {
  // @@protoc_insertion_point(field_get:Transformation.base)
  return *base_;
}
inline void Transformation::set_base(const ::std::string& value) {
  set_has_base();
  if (base_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    base_ = new ::std::string;
  }
  base_->assign(value);
  // @@protoc_insertion_point(field_set:Transformation.base)
}
inline void Transformation::set_base(const char* value) {
  set_has_base();
  if (base_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    base_ = new ::std::string;
  }
  base_->assign(value);
  // @@protoc_insertion_point(field_set_char:Transformation.base)
}
inline void Transformation::set_base(const char* value, size_t size) {
  set_has_base();
  if (base_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    base_ = new ::std::string;
  }
  base_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Transformation.base)
}
inline ::std::string* Transformation::mutable_base() {
  set_has_base();
  if (base_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    base_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Transformation.base)
  return base_;
}
inline ::std::string* Transformation::release_base() {
  clear_has_base();
  if (base_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = base_;
    base_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Transformation::set_allocated_base(::std::string* base) {
  if (base_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete base_;
  }
  if (base) {
    set_has_base();
    base_ = base;
  } else {
    clear_has_base();
    base_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Transformation.base)
}

// optional .Rotation rotation = 3;
inline bool Transformation::has_rotation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transformation::set_has_rotation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transformation::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transformation::clear_rotation() {
  if (rotation_ != NULL) rotation_->::Rotation::Clear();
  clear_has_rotation();
}
inline const ::Rotation& Transformation::rotation() const {
  // @@protoc_insertion_point(field_get:Transformation.rotation)
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
inline ::Rotation* Transformation::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) rotation_ = new ::Rotation;
  // @@protoc_insertion_point(field_mutable:Transformation.rotation)
  return rotation_;
}
inline ::Rotation* Transformation::release_rotation() {
  clear_has_rotation();
  ::Rotation* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void Transformation::set_allocated_rotation(::Rotation* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:Transformation.rotation)
}

// optional .Translation translation = 4;
inline bool Transformation::has_translation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transformation::set_has_translation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transformation::clear_has_translation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transformation::clear_translation() {
  if (translation_ != NULL) translation_->::Translation::Clear();
  clear_has_translation();
}
inline const ::Translation& Transformation::translation() const {
  // @@protoc_insertion_point(field_get:Transformation.translation)
  return translation_ != NULL ? *translation_ : *default_instance_->translation_;
}
inline ::Translation* Transformation::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) translation_ = new ::Translation;
  // @@protoc_insertion_point(field_mutable:Transformation.translation)
  return translation_;
}
inline ::Translation* Transformation::release_translation() {
  clear_has_translation();
  ::Translation* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void Transformation::set_allocated_translation(::Translation* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:Transformation.translation)
}

// -------------------------------------------------------------------

// CoordinateTrans

// optional string name = 1;
inline bool CoordinateTrans::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CoordinateTrans::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CoordinateTrans::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CoordinateTrans::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CoordinateTrans::name() const {
  // @@protoc_insertion_point(field_get:CoordinateTrans.name)
  return *name_;
}
inline void CoordinateTrans::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CoordinateTrans.name)
}
inline void CoordinateTrans::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CoordinateTrans.name)
}
inline void CoordinateTrans::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CoordinateTrans.name)
}
inline ::std::string* CoordinateTrans::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CoordinateTrans.name)
  return name_;
}
inline ::std::string* CoordinateTrans::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CoordinateTrans::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CoordinateTrans.name)
}

// repeated .Transformation transformation = 2;
inline int CoordinateTrans::transformation_size() const {
  return transformation_.size();
}
inline void CoordinateTrans::clear_transformation() {
  transformation_.Clear();
}
inline const ::Transformation& CoordinateTrans::transformation(int index) const {
  // @@protoc_insertion_point(field_get:CoordinateTrans.transformation)
  return transformation_.Get(index);
}
inline ::Transformation* CoordinateTrans::mutable_transformation(int index) {
  // @@protoc_insertion_point(field_mutable:CoordinateTrans.transformation)
  return transformation_.Mutable(index);
}
inline ::Transformation* CoordinateTrans::add_transformation() {
  // @@protoc_insertion_point(field_add:CoordinateTrans.transformation)
  return transformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Transformation >&
CoordinateTrans::transformation() const {
  // @@protoc_insertion_point(field_list:CoordinateTrans.transformation)
  return transformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::Transformation >*
CoordinateTrans::mutable_transformation() {
  // @@protoc_insertion_point(field_mutable_list:CoordinateTrans.transformation)
  return &transformation_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tf_5ftree_2eproto__INCLUDED
