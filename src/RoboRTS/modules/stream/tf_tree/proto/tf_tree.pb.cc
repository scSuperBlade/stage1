// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tf_tree.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tf_tree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Rotation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rotation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Translation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Translation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoordinateTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoordinateTrans_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tf_5ftree_2eproto() {
  protobuf_AddDesc_tf_5ftree_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tf_tree.proto");
  GOOGLE_CHECK(file != NULL);
  Rotation_descriptor_ = file->message_type(0);
  static const int Rotation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotation, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotation, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotation, roll_),
  };
  Rotation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rotation_descriptor_,
      Rotation::default_instance_,
      Rotation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rotation));
  Translation_descriptor_ = file->message_type(1);
  static const int Translation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Translation, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Translation, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Translation, z_),
  };
  Translation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Translation_descriptor_,
      Translation::default_instance_,
      Translation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Translation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Translation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Translation));
  Transformation_descriptor_ = file->message_type(2);
  static const int Transformation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transformation, sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transformation, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transformation, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transformation, translation_),
  };
  Transformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transformation_descriptor_,
      Transformation::default_instance_,
      Transformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transformation));
  CoordinateTrans_descriptor_ = file->message_type(3);
  static const int CoordinateTrans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinateTrans, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinateTrans, transformation_),
  };
  CoordinateTrans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CoordinateTrans_descriptor_,
      CoordinateTrans::default_instance_,
      CoordinateTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinateTrans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinateTrans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CoordinateTrans));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tf_5ftree_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rotation_descriptor_, &Rotation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Translation_descriptor_, &Translation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transformation_descriptor_, &Transformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CoordinateTrans_descriptor_, &CoordinateTrans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tf_5ftree_2eproto() {
  delete Rotation::default_instance_;
  delete Rotation_reflection_;
  delete Translation::default_instance_;
  delete Translation_reflection_;
  delete Transformation::default_instance_;
  delete Transformation_reflection_;
  delete CoordinateTrans::default_instance_;
  delete CoordinateTrans_reflection_;
}

void protobuf_AddDesc_tf_5ftree_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rtf_tree.proto\"4\n\010Rotation\022\r\n\005pitch\030\001 \001"
    "(\002\022\013\n\003yaw\030\002 \001(\002\022\014\n\004roll\030\003 \001(\002\".\n\013Transla"
    "tion\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"n\n"
    "\016Transformation\022\016\n\006sensor\030\001 \001(\t\022\014\n\004base\030"
    "\002 \001(\t\022\033\n\010rotation\030\003 \001(\0132\t.Rotation\022!\n\013tr"
    "anslation\030\004 \001(\0132\014.Translation\"H\n\017Coordin"
    "ateTrans\022\014\n\004name\030\001 \001(\t\022\'\n\016transformation"
    "\030\002 \003(\0132\017.Transformation", 303);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tf_tree.proto", &protobuf_RegisterTypes);
  Rotation::default_instance_ = new Rotation();
  Translation::default_instance_ = new Translation();
  Transformation::default_instance_ = new Transformation();
  CoordinateTrans::default_instance_ = new CoordinateTrans();
  Rotation::default_instance_->InitAsDefaultInstance();
  Translation::default_instance_->InitAsDefaultInstance();
  Transformation::default_instance_->InitAsDefaultInstance();
  CoordinateTrans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tf_5ftree_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tf_5ftree_2eproto {
  StaticDescriptorInitializer_tf_5ftree_2eproto() {
    protobuf_AddDesc_tf_5ftree_2eproto();
  }
} static_descriptor_initializer_tf_5ftree_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Rotation::kPitchFieldNumber;
const int Rotation::kYawFieldNumber;
const int Rotation::kRollFieldNumber;
#endif  // !_MSC_VER

Rotation::Rotation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rotation)
}

void Rotation::InitAsDefaultInstance() {
}

Rotation::Rotation(const Rotation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Rotation)
}

void Rotation::SharedCtor() {
  _cached_size_ = 0;
  pitch_ = 0;
  yaw_ = 0;
  roll_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rotation::~Rotation() {
  // @@protoc_insertion_point(destructor:Rotation)
  SharedDtor();
}

void Rotation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rotation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rotation_descriptor_;
}

const Rotation& Rotation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5ftree_2eproto();
  return *default_instance_;
}

Rotation* Rotation::default_instance_ = NULL;

Rotation* Rotation::New() const {
  return new Rotation;
}

void Rotation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Rotation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pitch_, roll_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float pitch = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_yaw;
        break;
      }

      // optional float yaw = 2;
      case 2: {
        if (tag == 21) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_roll;
        break;
      }

      // optional float roll = 3;
      case 3: {
        if (tag == 29) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rotation)
  return false;
#undef DO_
}

void Rotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rotation)
  // optional float pitch = 1;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pitch(), output);
  }

  // optional float yaw = 2;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yaw(), output);
  }

  // optional float roll = 3;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roll(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Rotation)
}

::google::protobuf::uint8* Rotation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rotation)
  // optional float pitch = 1;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pitch(), target);
  }

  // optional float yaw = 2;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yaw(), target);
  }

  // optional float roll = 3;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->roll(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rotation)
  return target;
}

int Rotation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float pitch = 1;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // optional float yaw = 2;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // optional float roll = 3;
    if (has_roll()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rotation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rotation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rotation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rotation::MergeFrom(const Rotation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rotation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rotation::CopyFrom(const Rotation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rotation::IsInitialized() const {

  return true;
}

void Rotation::Swap(Rotation* other) {
  if (other != this) {
    std::swap(pitch_, other->pitch_);
    std::swap(yaw_, other->yaw_);
    std::swap(roll_, other->roll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rotation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rotation_descriptor_;
  metadata.reflection = Rotation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Translation::kXFieldNumber;
const int Translation::kYFieldNumber;
const int Translation::kZFieldNumber;
#endif  // !_MSC_VER

Translation::Translation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Translation)
}

void Translation::InitAsDefaultInstance() {
}

Translation::Translation(const Translation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Translation)
}

void Translation::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Translation::~Translation() {
  // @@protoc_insertion_point(destructor:Translation)
  SharedDtor();
}

void Translation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Translation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Translation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Translation_descriptor_;
}

const Translation& Translation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5ftree_2eproto();
  return *default_instance_;
}

Translation* Translation::default_instance_ = NULL;

Translation* Translation::New() const {
  return new Translation;
}

void Translation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Translation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Translation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Translation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Translation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Translation)
  return false;
#undef DO_
}

void Translation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Translation)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Translation)
}

::google::protobuf::uint8* Translation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Translation)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Translation)
  return target;
}

int Translation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Translation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Translation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Translation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Translation::MergeFrom(const Translation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Translation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Translation::CopyFrom(const Translation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Translation::IsInitialized() const {

  return true;
}

void Translation::Swap(Translation* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Translation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Translation_descriptor_;
  metadata.reflection = Translation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Transformation::kSensorFieldNumber;
const int Transformation::kBaseFieldNumber;
const int Transformation::kRotationFieldNumber;
const int Transformation::kTranslationFieldNumber;
#endif  // !_MSC_VER

Transformation::Transformation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Transformation)
}

void Transformation::InitAsDefaultInstance() {
  rotation_ = const_cast< ::Rotation*>(&::Rotation::default_instance());
  translation_ = const_cast< ::Translation*>(&::Translation::default_instance());
}

Transformation::Transformation(const Transformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Transformation)
}

void Transformation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sensor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotation_ = NULL;
  translation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transformation::~Transformation() {
  // @@protoc_insertion_point(destructor:Transformation)
  SharedDtor();
}

void Transformation::SharedDtor() {
  if (sensor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sensor_;
  }
  if (base_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete base_;
  }
  if (this != default_instance_) {
    delete rotation_;
    delete translation_;
  }
}

void Transformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transformation_descriptor_;
}

const Transformation& Transformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5ftree_2eproto();
  return *default_instance_;
}

Transformation* Transformation::default_instance_ = NULL;

Transformation* Transformation::New() const {
  return new Transformation;
}

void Transformation::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_sensor()) {
      if (sensor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sensor_->clear();
      }
    }
    if (has_base()) {
      if (base_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        base_->clear();
      }
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::Rotation::Clear();
    }
    if (has_translation()) {
      if (translation_ != NULL) translation_->::Translation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Transformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sensor = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sensor().data(), this->sensor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sensor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional string base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->base().data(), this->base().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "base");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rotation;
        break;
      }

      // optional .Rotation rotation = 3;
      case 3: {
        if (tag == 26) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_translation;
        break;
      }

      // optional .Translation translation = 4;
      case 4: {
        if (tag == 34) {
         parse_translation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Transformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Transformation)
  return false;
#undef DO_
}

void Transformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Transformation)
  // optional string sensor = 1;
  if (has_sensor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor().data(), this->sensor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sensor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sensor(), output);
  }

  // optional string base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base().data(), this->base().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "base");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->base(), output);
  }

  // optional .Rotation rotation = 3;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rotation(), output);
  }

  // optional .Translation translation = 4;
  if (has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->translation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Transformation)
}

::google::protobuf::uint8* Transformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Transformation)
  // optional string sensor = 1;
  if (has_sensor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor().data(), this->sensor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sensor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sensor(), target);
  }

  // optional string base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base().data(), this->base().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "base");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->base(), target);
  }

  // optional .Rotation rotation = 3;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rotation(), target);
  }

  // optional .Translation translation = 4;
  if (has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->translation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Transformation)
  return target;
}

int Transformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sensor = 1;
    if (has_sensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensor());
    }

    // optional string base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base());
    }

    // optional .Rotation rotation = 3;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

    // optional .Translation translation = 4;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transformation::MergeFrom(const Transformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensor()) {
      set_sensor(from.sensor());
    }
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::Rotation::MergeFrom(from.rotation());
    }
    if (from.has_translation()) {
      mutable_translation()->::Translation::MergeFrom(from.translation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transformation::CopyFrom(const Transformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transformation::IsInitialized() const {

  return true;
}

void Transformation::Swap(Transformation* other) {
  if (other != this) {
    std::swap(sensor_, other->sensor_);
    std::swap(base_, other->base_);
    std::swap(rotation_, other->rotation_);
    std::swap(translation_, other->translation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transformation_descriptor_;
  metadata.reflection = Transformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CoordinateTrans::kNameFieldNumber;
const int CoordinateTrans::kTransformationFieldNumber;
#endif  // !_MSC_VER

CoordinateTrans::CoordinateTrans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoordinateTrans)
}

void CoordinateTrans::InitAsDefaultInstance() {
}

CoordinateTrans::CoordinateTrans(const CoordinateTrans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CoordinateTrans)
}

void CoordinateTrans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoordinateTrans::~CoordinateTrans() {
  // @@protoc_insertion_point(destructor:CoordinateTrans)
  SharedDtor();
}

void CoordinateTrans::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CoordinateTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoordinateTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoordinateTrans_descriptor_;
}

const CoordinateTrans& CoordinateTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5ftree_2eproto();
  return *default_instance_;
}

CoordinateTrans* CoordinateTrans::default_instance_ = NULL;

CoordinateTrans* CoordinateTrans::New() const {
  return new CoordinateTrans;
}

void CoordinateTrans::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  transformation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoordinateTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoordinateTrans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transformation;
        break;
      }

      // repeated .Transformation transformation = 2;
      case 2: {
        if (tag == 18) {
         parse_transformation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transformation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transformation;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoordinateTrans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoordinateTrans)
  return false;
#undef DO_
}

void CoordinateTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoordinateTrans)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .Transformation transformation = 2;
  for (int i = 0; i < this->transformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transformation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CoordinateTrans)
}

::google::protobuf::uint8* CoordinateTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoordinateTrans)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .Transformation transformation = 2;
  for (int i = 0; i < this->transformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transformation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoordinateTrans)
  return target;
}

int CoordinateTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Transformation transformation = 2;
  total_size += 1 * this->transformation_size();
  for (int i = 0; i < this->transformation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transformation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoordinateTrans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CoordinateTrans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CoordinateTrans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoordinateTrans::MergeFrom(const CoordinateTrans& from) {
  GOOGLE_CHECK_NE(&from, this);
  transformation_.MergeFrom(from.transformation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoordinateTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoordinateTrans::CopyFrom(const CoordinateTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinateTrans::IsInitialized() const {

  return true;
}

void CoordinateTrans::Swap(CoordinateTrans* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    transformation_.Swap(&other->transformation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CoordinateTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoordinateTrans_descriptor_;
  metadata.reflection = CoordinateTrans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
